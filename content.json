{"meta":{"title":"MarkLily","subtitle":"Tell me what you want,and i'll aviod it","description":"","author":"CJBLUE","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2021-07-06T13:14:11.000Z","updated":"2021-07-07T13:22:43.430Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-07-06T13:14:11.000Z","updated":"2021-07-07T13:18:53.168Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"gallery","date":"2021-07-07T13:24:58.000Z","updated":"2021-07-07T13:26:28.584Z","comments":true,"path":"gallery/index.html","permalink":"http://example.com/gallery/index.html","excerpt":"","text":"melody background demo1 demo2 demo3 No title"}],"posts":[{"title":"Pandas","slug":"PandasNotes","date":"2021-07-06T02:30:56.141Z","updated":"2021-07-07T13:26:51.547Z","comments":true,"path":"2021/07/06/PandasNotes/","link":"","permalink":"http://example.com/2021/07/06/PandasNotes/","excerpt":"","text":"2126Pandas数据结构pandas有两种数据结构：Series and dataframe数据框 SeriesSeries是一个一维标记数组，可以存储任何种类的数据 12my_series = pd.Series([3,-5,7,4], index=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;])print(my_series) 12345a 3b -5c 7d 4dtype: int64 Series中的数据可通过index找到 1print(my_series[&#x27;d&#x27;]) 14 series类似于字典(当然这只是个人直观感受) dataframe是一个二维数据结构,包含不同的列 12345678data = &#123; &#x27;Country&#x27; : [&#x27;Belgium&#x27;, &#x27;India&#x27;, &#x27;Brazil&#x27; ], &#x27;Capital&#x27;: [&#x27;Brussels&#x27;, &#x27;New Delhi&#x27;, &#x27;Brassilia&#x27;], &#x27;Population&#x27;: [1234,1234,1234]&#125;datas = pd.DataFrame(data, columns=[&#x27;Country&#x27;,&#x27;Capital&#x27;,&#x27;Population&#x27;])print(type(data))print(type(datas))print(datas) 123456&lt;class &#x27;dict&#x27;&gt;&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;Country Capital Population0 Belgium Brussels 12341 India New Delhi 12342 Brazil Brassilia 1234 创建dataframe时,在写入或打印时会自动生成从第一行正式数据开始的行序号 and 第一列正式数据开始的列序号dataframe类似于数组,可直接使用行列序号进行访问具体的数据 调用/读取数据 CSV文件 12pd = pd.read_csv(&#x27;.//testdata/demo1.csv&#x27;)print(pd.__class__) 1&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt; xlsx文件 12df = pd.read_excel(&#x27;.//testdata/demo1.xlsx&#x27; )print(df.__class__) 1&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt; 数据存储各类文件读取成为dataframe数据后可随意转存为其他格式的文件 12345678910df_cvs = pd.read_csv(&#x27;.//testdata/demo1.csv&#x27; )df_xlsx = pd.read_excel(&#x27;.//testdata/demo1.xlsx&#x27; )# csv读取的文件保存为csvdf_cvs.to_csv(&#x27;csv_to_csv.csv&#x27;)# excel读取的数据保存为exceldf_xlsx.to_excel(&#x27;xlsx_to_xlsx.xlsx&#x27;)# csv读取的数据保存为exceldf_cvs.to_excel(&#x27;csv_to_xlsx.xlsx&#x27;)# excel读取的数据保存为csvdf_xlsx.to_csv(&#x27;xlsx_to_csv.csv&#x27;) 创建测试对象创建一个20 × 5 的随机数的数据框(dataframe) 使用np生成矩阵的形式创建dataframe’ 12test_data = pd.DataFrame(np.random.randint(0, 20, size=(20, 5)))print(test_data) 直接输入生成 1234567df = pd.DataFrame(&#123;&quot;id&quot;:[1001,1002,1003,1004,1005,1006], &quot;date&quot;:pd.date_range(&#x27;20130102&#x27;, periods=6),&quot;city&quot;:[&#x27;Beijing &#x27;, &#x27;SH&#x27;, &#x27; guangzhou &#x27;, &#x27;Shenzhen&#x27;, &#x27;shanghai&#x27;, &#x27;BEIJING &#x27;],&quot;age&quot;:[23,44,54,32,34,32],&quot;category&quot;:[&#x27;100-A&#x27;,&#x27;100-B&#x27;,&#x27;110-A&#x27;,&#x27;110-C&#x27;,&#x27;210-A&#x27;,&#x27;130-F&#x27;],&quot;price&quot;:[1200,np.nan,2133,5433,np.nan,4432]&#125;,) 可在{}内数据内容后添加columns =[&#39;id&#39;,&#39;date&#39;,&#39;city&#39;,&#39;category&#39;,&#39;age&#39;,&#39;price&#39;],借此自定义dataframe内数据的列次序统计数据函数 df.info() :本函数提供dataframe的以下信息: RangeIndex:有多少数据 Data Columns:指定找到多少列 Columns:提供关于columns的信息 dtypes:提供dataframe内的数据类型 memory usage:表明内存使用量12test_data = pd.DataFrame(np.random.randint(0, 20, size=(20, 5)))print(test_data.info() 12345678910111213&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;RangeIndex: 20 entries, 0 to 19Data columns (total 5 columns):# Column Non-Null Count Dtype--- ------ -------------- -----0 0 20 non-null int321 1 20 non-null int322 2 20 non-null int323 3 20 non-null int324 4 20 non-null int32dtypes: int32(5)memory usage: 528.0 bytesNone df.shape 1print(test_data.shape) 1(20, 5) 类似于数组,shape作为属性,而非函数 df.index():显示找到的索引信息 1print(test_data.index) 1RangeIndex(start=0, stop=20, step=1) index作为属性 not callable df.count():给出每一列中有多少数据 1print(test_data.count()) 1234560 201 202 203 204 20dtype: int64 df.sum():给出每一列中的求和 1print(test_data.sum()) 1234560 2001 1192 2403 2144 204dtype: int64 df.sum():给出每一列中的求和 1print(test_data.sum()) 1234560 2001 1192 2403 2144 204dtype: int64 df.cumsum() 给出依次将每列前n行求和的结果 1print(test_data.cumsum()) 12345678910111213 id date city category age price0 1001 2013-01-02 Beijing 100-A 23 1200.01 1002 2013-01-03 SH 100-B 44 NaN2 1003 2013-01-04 guangzhou 110-A 54 2133.03 1004 2013-01-05 Shenzhen 110-C 32 5433.05 1006 2013-01-07 BEIJING 130-F 32 4432.0id date city category age price 0 1001 2013-01-02 Beijing 100-A 23 1200.0 1 2003 2056-01-05 Beijing SH 100-A100-B 67 NaN 2 3006 2099-01-08 Beijing SH guangzhou 100-A100-B110-A 121 3333.0 3 4010 2142-01-13 Beijing SH guangzhou Shenzhen 100-A100-B110-A110-C 153 8766.0 4 5015 2185-01-18 Beijing SH guangzhou Shenzhenshanghai 100-A100-B110-A110-C210-A 187 NaN 5 6021 2228-01-26 Beijing SH guangzhou ShenzhenshanghaiBEIJING 100-A100-B110-A110-C210-A130-F 219 13198.0 所得结果依然为dataframe 指定列时，只计算该列的累加值: tar = df[‘id’].cumsum() 不指定列时，则将返回各列的累加值 df.min():给出每列中的最小值 12345678id 1001date 2013-01-02 00:00:00city guangzhou category 100-Aage 23price 1200.0dtype: object &lt;class &#x27;pandas.core.series.Series&#x27;&gt; 所得结果为Series df.describe():函数提供了有关数据的基本统计信息（基于列计算）：count、mean、std、min、25%、50%、75%、max 12345678910 id age pricecount 6.000000 6.00000 4.000000mean 1003.500000 36.50000 3299.500000std 1.870829 10.87658 1966.638503min 1001.000000 23.00000 1200.00000025% 1002.250000 32.00000 1899.75000050% 1003.500000 33.00000 3282.50000075% 1004.750000 41.50000 4682.250000max 1006.000000 54.00000 5433.000000 &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt; df.mean():给出每列中的均值 123456tar = df.mean()id 1003.5age 36.5price 3299.5dtype: float64&lt;class &#x27;pandas.core.series.Series&#x27;&gt; 只针对dataframe中的数字 df.median():给出每列中的中位数 df.quantlie([0.25, 0.75]):给出每列中的25% 和 75%的分位数 df.var()–方差值 df.std()–标准差值 df.cummin()–返回前n行的最小值 len(df):确定列的行数 len(df[‘columnId’]):返回某列的行数 df.count():返回Nan值个数 df.isnull():返回dataframe中各值是否为null return DataFrame df.corr():返回各列之间的相关系数 pandas中的选择与过滤 Series: mySeries[‘index’]–返回索引值为’index’的value df[n:N]–返回行n到N-1的dataframe 1tar =df[2:5] 12345id date city category age price2 1003 2013-01-04 guangzhou 110-A 54 2133.03 1004 2013-01-05 Shenzhen 110-C 32 5433.04 1005 2013-01-06 shanghai 210-A 34 NaN&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt; df.head()–返回dataframe中的前几行,默认为5行 df.tail() df.sample()–随机选取几行,按频数 create filter–创建一个过滤条件 12filters = df.id &gt; 1003df[filter] 12343 1004 2013-01-05 Shenzhen 110-C 32 5433.04 1005 2013-01-06 shanghai 210-A 34 NaN5 1006 2013-01-07 BEIJING 130-F 32 4432.0 &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt; df.filter(regex = ‘code’)–表示regex = ‘code’的列通过过滤条件 1tar = df.filter(regex=&#x27;date&#x27;).head() 1234567 date0 2013-01-021 2013-01-032 2013-01-043 2013-01-054 2013-01-06&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt; np.logicl_and(filter1, filter2)–并行多个filter 1tar =df[np.logical_and(df[&#x27;id&#x27;] &gt; 1003, df[&#x27;age&#x27;] &gt; 33)] 14 1005 2013-01-06 shanghai 210-A 34 NaN df[(filter1) &amp; (filter2)] 1tar =df[(df[&#x27;id&#x27;] &gt; 1003) &amp; (df[&#x27;age&#x27;] &gt; 33)] sort data df.sort_values(‘columnName’, ascending=True) 对columnName列排序 ascending=true表示升序1df.sort_values(&#x27;age&#x27;, ascending=True) 123456789101112131415 id date city category age price0 1001 2013-01-02 Beijing 100-A 23 1200.01 1002 2013-01-03 SH 100-B 44 NaN2 1003 2013-01-04 guangzhou 110-A 54 2133.03 1004 2013-01-05 Shenzhen 110-C 32 5433.04 1005 2013-01-06 shanghai 210-A 34 NaN5 1006 2013-01-07 BEIJING 130-F 32 4432.0 id date city category age price0 1001 2013-01-02 Beijing 100-A 23 1200.03 1004 2013-01-05 Shenzhen 110-C 32 5433.05 1006 2013-01-07 BEIJING 130-F 32 4432.04 1005 2013-01-06 shanghai 210-A 34 NaN1 1002 2013-01-03 SH 100-B 44 NaN2 1003 2013-01-04 guangzhou 110-A 54 2133.0&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt; df.sort_index() 对索引按照默认升序1df.sort_index() 12345### 重命名&amp;定义\\修改新的列1. df.rename(columns = &#123;&#x27;oldColumnName&#x27;:&#x27;newColumnName&#x27;&#125;) * 重命名 9 ```python tar = df.rename(columns = &#123;&#x27;id&#x27;:&#x27;newId&#x27;&#125;) df[‘newColume’] = newDesignWay 1df[&#x27;thisisanewcolumn&#x27;] = pd.Series(np.arange(0, 6, 1)) 1234567 id date city category age price thisisanewcolumn0 1001 2013-01-02 Beijing 100-A 23 1200.0 01 1002 2013-01-03 SH 100-B 44 NaN 12 1003 2013-01-04 guangzhou 110-A 54 2133.0 23 1004 2013-01-05 Shenzhen 110-C 32 5433.0 34 1005 2013-01-06 shanghai 210-A 34 NaN 45 1006 2013-01-07 BEIJING 130-F 32 4432.0 5 df.index.name = “index_name” 修改index为新index12345 ```4. df.columns = map(str.lower, df.columns) * 所有列名变大写字母 ```python df.columns = map(str.lower, df.columns) map()–python的内置函数,接受一个function,数个待迭代的list,使用function对list进行处理得到新的list,并不改变原list Drop Data df.drop(columns=[‘columnName’]) 指定删除某列数据1tar = df.drop(columns=[&#x27;Id&#x27;]) mySeries.drop([‘a’]) 指定删除索引值指向的value f.drop(‘Volume’, axis=1) 删除一个变量\\一个量1tar = df.drop(&#x27;Id&#x27;, axis=1) 转换数据类型 df.dtypes dataframe内各列的数据类型 df[‘columnName’] = df[‘columnName’].astype(‘dataType’) 转换指定行的数据类型1df[&#x27;Id&#x27;] = df[&#x27;Id&#x27;].astype(&#x27;float&#x27;) apply函数 方法1–自定义def函数 1234def examples(x): #create a functionreturn x*2df.Open.apply(examples).head() #use the function with apply() 自定义函数后,df.ColumnName获取df中需要使用此函数的列,再对此列使用apply函数,传入需要使用的函数 lambda函数 1df.Open.apply(lambda x: x*2).head() df.ColumnName获取df中需要使用此函数的列,再对此列使用lambda 声明数据处理方法","categories":[],"tags":[]}],"categories":[],"tags":[]}