<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pyhont-Array</title>
    <url>/2021/07/07/Array/</url>
    <content><![CDATA[<h1 id="数组-array"><a href="#数组-array" class="headerlink" title="数组-array"></a>数组-array</h1><p>数组的基本性质:</p>
<ul>
<li>数组本身不属于基本数据类型,需要导入<code>array</code>使用数组</li>
<li>数组内部元素类型相同</li>
<li>数组不同于列表:内部元素相同,列表内部元素可以不同</li>
<li>人如其名,内部元素只能是数字<h2 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h2></li>
<li>声明一个数组,必须遵循基本语法:<br><code>arrayName = array(typecode, [initializers])</code>: typecode:str  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1 = array(<span class="string">&#x27;i&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1, arr1.__class__)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">array</span>.<span class="title">array</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>当声明数据类型与<code>initializers</code>数据类型不一,则报错:  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1 = array(<span class="string">&#x27;i&#x27;</span>,[<span class="number">1</span>,<span class="number">2.2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: integer argument expected, got <span class="built_in">float</span></span><br></pre></td></tr></table></figure></li>
<li>指定数据类型后,<code>initializers</code>可为空:  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1 = array(<span class="string">&#x27;i&#x27;</span>,[])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h2><h3 id="索引–"><a href="#索引–" class="headerlink" title="索引–[]"></a>索引–<code>[]</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1 = array(<span class="string">&#x27;i&#x27;</span>,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1[<span class="number">1</span>])</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="切片–"><a href="#切片–" class="headerlink" title="切片–:"></a>切片–<code>:</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1[<span class="number">1</span>:])</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<h3 id="index-x"><a href="#index-x" class="headerlink" title="index(x)"></a><code>index(x)</code></h3>返回首次出现<code>x</code>的最小索引<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1 = array(<span class="string">&#x27;i&#x27;</span>,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1.index(<span class="number">5</span>))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="负索引"><a href="#负索引" class="headerlink" title="负索引"></a>负索引</h3><h2 id="修改数组"><a href="#修改数组" class="headerlink" title="修改数组"></a>修改数组</h2><h3 id="append"><a href="#append" class="headerlink" title="append()"></a><code>append()</code></h3>将一个元素添加到数组末尾<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<h3 id="insert-x-i"><a href="#insert-x-i" class="headerlink" title="insert(x, i)"></a><code>insert(x, i)</code></h3>将元素<code>x</code>指定添加到<code>i</code>处<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">1</span>, <span class="number">22</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<h3 id="extend-x"><a href="#extend-x" class="headerlink" title="extend(x)"></a><code>extend(x)</code></h3>将x元素添加到数组,若<code>x</code>时数组,则二者应有相同的数据类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1 = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr2 = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1.extend(arr2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<h3 id="fromlist"><a href="#fromlist" class="headerlink" title="fromlist()"></a><code>fromlist()</code></h3>将<code>list</code>中的元素添加到数组中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.fromlist(l)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br></pre></td></tr></table></figure>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a><code>reverse()</code></h3>反转数组<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1.reverse())</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title="+"></a><code>+</code></h3>将两个数组拼接<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<h3 id="-1"><a href="#-1" class="headerlink" title="*"></a><code>*</code></h3>将数组复制添加到本身<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1*<span class="number">2</span>)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h3 id="del-arr-i"><a href="#del-arr-i" class="headerlink" title="del arr[i]"></a><code>del arr[i]</code></h3>删除某个元素,或数组<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr1</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> arr1[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> arr1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;arr1&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a><code>remove()</code></h3>从数组中删除第一个出现的<code>x</code>元素<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr2</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr2.remove(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr2)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a><code>pop()</code></h3>删除并返回数组的最后一个元素<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr2</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr2.remove(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr2)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
也可指定<code>pop</code>对象索引<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr2)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr2.pop(<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(arr2)</span><br><span class="line">array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyhont-Class</title>
    <url>/2021/07/07/Class/</url>
    <content><![CDATA[<h1 id="类–CLASS"><a href="#类–CLASS" class="headerlink" title="类–CLASS"></a>类–CLASS</h1><p>类 我的泪 学<code>java</code>的时候搞得很清楚的 操 现在忘干净了</p>
<h2 id="python中的类与对象"><a href="#python中的类与对象" class="headerlink" title="python中的类与对象"></a>python中的类与对象</h2>]]></content>
      <categories>
        <category>Python</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyhont-Tuple</title>
    <url>/2021/07/07/ListAndTuple/</url>
    <content><![CDATA[<h1 id="列表与元组"><a href="#列表与元组" class="headerlink" title="列表与元组"></a>列表与元组</h1><ul>
<li>当元素类型不一时使用元组,当类型一样则使用列表</li>
<li>元组遍历更快</li>
<li>使用元组元素(不可变)可作为字典的键值,而列表不可</li>
<li>元组保证了数据的安全<h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1 列表"></a>1 列表</h2></li>
</ul>
<p>–</p>
<h2 id="2-元组-tuple"><a href="#2-元组-tuple" class="headerlink" title="2 元组-tuple"></a>2 元组-<code>tuple</code></h2><p>元组类似于列表,但区别在于元组中的元素是不可变的</p>
<h3 id="2-1-创建一个元组"><a href="#2-1-创建一个元组" class="headerlink" title="2.1 创建一个元组"></a>2.1 创建一个元组</h3><p><code>1.</code> 使用<code>()</code>创建一个元组,使用<code>,</code>间隔元素<br><code>2.</code> 类似于列表,元组中的元素可以是任何数据类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tuple1, tuple1.__class__)</span><br><span class="line">(<span class="string">&#x27;aa&#x27;</span>, <span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为元组不能改变,所以创建伊始就应该指定正确的元素</p>
</blockquote>
<p><code>3.</code> 创建元组时只指明一个元素<code>(dtype A)</code>,则该元组(你意图创建的)会被视为<code>A</code>的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># case1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.__class__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"># <span class="title">case2</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">b</span> = (<span class="params">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">b.__class__</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"># <span class="title">case3</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span> = (<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">c.__class__</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>case1-3</code>中意图创建元组<code>a b c</code>,但创建时指指定了一个内部元素<code>param(dtype A)</code>,因此该元组被视为<code>A</code>类的一个对象</p>
<h3 id="2-2-访问元组元素"><a href="#2-2-访问元组元素" class="headerlink" title="2.2 访问元组元素"></a>2.2 访问元组元素</h3><h4 id="2-2-1-索引-index"><a href="#2-2-1-索引-index" class="headerlink" title="2.2.1 索引-index"></a>2.2.1 索引-index</h4><p><code>[index:int]</code>使用索引操作符来访问元组中的元素<br><code>1.</code> 正索引 : <code>0-len(tuple)-1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tuple1[<span class="number">2</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><code>2.</code> 负索引</p>
<h4 id="2-2-2-切片"><a href="#2-2-2-切片" class="headerlink" title="2.2.2 切片"></a>2.2.2 切片</h4><p><code>:</code>使用切片操作符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tuple1[<span class="number">1</span>:])</span><br><span class="line">(<span class="number">1</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><code>1.</code> <code>enumerate()</code>: 将元组内所有对象及其索引枚举,以元组的形式返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">enumerate</span>(tuple1).__class__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">enumerate</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>2.</code> <code>tuple()</code>: 将序列（元组，字符串，字典）转换为元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;aa&#x27;</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tp1 = <span class="built_in">tuple</span>(list1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(list1.__class__, tp1.__class__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">list</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>3.</code> <code>sorted</code>: 返回一个排序元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuplle1 = (<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">sorted</span>(tuplle1))</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Namespace</title>
    <url>/2021/07/07/NameSpace/</url>
    <content><![CDATA[<h1 id="命名空间及作用域"><a href="#命名空间及作用域" class="headerlink" title="命名空间及作用域"></a>命名空间及作用域</h1><h2 id="1-命名空间"><a href="#1-命名空间" class="headerlink" title="1.命名空间"></a>1.命名空间</h2><h3 id="1-1-命名空间（Namespace）"><a href="#1-1-命名空间（Namespace）" class="headerlink" title="1.1 命名空间（Namespace）"></a>1.1 命名空间（Namespace）</h3><p><code>1.</code> 是从名称到对象的映射，一般通过字典实现<br><code>2.</code> 类似于<code>c++</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std</span><br></pre></td></tr></table></figure>
<h3 id="1-2-命名空间主要为了避免对象名称冲突"><a href="#1-2-命名空间主要为了避免对象名称冲突" class="headerlink" title="1.2 命名空间主要为了避免对象名称冲突"></a>1.2 命名空间主要为了避免对象名称冲突</h3><p><code>1. </code> 各个命名空间之间相互独立<br><code>2. </code> 命名空间内部不能有同名称对象<br><code>3. </code> 各个命名空间之间可以有相同名称对象</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 如计算机内部文件夹之间的关系：</span></span><br><span class="line"><span class="bullet">    *</span> 单个文件夹内部不能有同名称元素</span><br><span class="line"><span class="bullet">    *</span> 不同文件夹之间可以同名称元素</span><br></pre></td></tr></table></figure>
<h3 id="1-3-python一般有三种命名空间：内置-built-in-局部-本地-local-全局-global"><a href="#1-3-python一般有三种命名空间：内置-built-in-局部-本地-local-全局-global" class="headerlink" title="1.3 python一般有三种命名空间：内置-built in 局部(本地)-local 全局-global"></a>1.3 python一般有三种命名空间：<code>内置-built in</code> <code>局部(本地)-local</code> <code>全局-global</code></h3><h4 id="1-3-1-局部"><a href="#1-3-1-局部" class="headerlink" title="1.3.1 局部"></a>1.3.1 局部</h4><p><code>1.</code> 局部空间包含:函数中定义的名称,记录了函数的变量,包括函数的参数与局部变量</p>
<ul>
<li>此局部指的是此作用域,及其内部包含的对象 名称</li>
</ul>
<p><code>2.</code> <code>locals()</code>:返回当前位置的全部局部变量</p>
<ul>
<li>当前位置指的是当前<code>locals()</code>函数被调用的位置</li>
<li>全局内使用<code>locals()</code>:所有有实例的函数 方法 lambda函式以及实现了__call__的,都会返回true<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="title">__spec__</span>&#x27;:</span> <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;len&#x27;</span>: &lt;function <span class="built_in">len</span> at <span class="number">0x00000186888145E8</span>&gt;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时的局部空间等于全局空间</p>
</blockquote>
</li>
<li>函数内部使用<code>locals()</code>:返回此函数空间内的所有名称及对象<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">len</span>(<span class="params">param</span>):</span></span><br><span class="line"><span class="meta">... </span>    in_param = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="number">4</span>)</span><br><span class="line">&#123;<span class="string">&#x27;param&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;in_param&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li>循环内使用<code>locals()</code>:  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>]:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line">...</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="title">__spec__</span>&#x27;:</span> <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;i&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="title">__spec__</span>&#x27;:</span> <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;i&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>证明for循环不算一个单独的作用域</p>
</blockquote>
</li>
</ul>
<h4 id="1-3-2-全局"><a href="#1-3-2-全局" class="headerlink" title="1.3.2 全局"></a>1.3.2 全局</h4><p><code>1.</code> 全局空间包含:模块中定义的名称,记录了模块的变量,包括函数 类 导入模块</p>
<ul>
<li>可理解为此<code>.py</code>文件所代表的空间</li>
</ul>
<p><code>2.</code> <code>globals()</code>:返回当前全局空间内的名称及对象</p>
<ul>
<li>全局内使用<code>globals()</code>:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="title">__spec__</span>&#x27;:</span> <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;i&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li>全局命名空间里包括了整个模块内的命名名称，比如变量 x y 函数名,而且还包括了一些内置的变量命名，比如 <code>__name__</code> <code>__file__</code>等等。</li>
<li>全局空间与全局使用局部空间相同:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="built_in">locals</span>() == <span class="built_in">globals</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">yes</span><br></pre></td></tr></table></figure>
<h4 id="1-3-3-内置"><a href="#1-3-3-内置" class="headerlink" title="1.3.3 内置"></a>1.3.3 内置</h4><code>1.</code> 内置空间包含:python语言的内置名称,如函数名abs char等<h3 id="1-4-各空间关系"><a href="#1-4-各空间关系" class="headerlink" title="1.4 各空间关系"></a>1.4 各空间关系</h3><code>1. </code>命名空间使用顺序:局部-&gt;全局-&gt;内置</li>
<li>这样可以完成对<code>全局</code> <code>内置</code>函数的’’改写’’:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">len</span>(<span class="params">param</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(param)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

python内置此方法的输出为元素长度:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li>
<li>当无法找到此名称的对象时,则抛出异常<h3 id="命名空间的生命周期"><a href="#命名空间的生命周期" class="headerlink" title="命名空间的生命周期"></a>命名空间的生命周期</h3>命名空间的声明周期却决与该变量的作用域,对象执行完成,则该命名空间的生命周期结束<h2 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2. 作用域"></a>2. 作用域</h2><h3 id="2-1-作用域"><a href="#2-1-作用域" class="headerlink" title="2.1 作用域"></a>2.1 作用域</h3><code>1.</code> 作用域:访问某变量 对象的区域</li>
<li>每个对象都存在特定的作用域中 作用时段中</li>
<li>当前程序未执行到该作用域,则某些只存在于该作用域的对象则不能被访问</li>
<li>或者说,只有被赋值且未该赋值区域未完成其全部功能时,该对象才能被访问<blockquote>
<p>简单来说就是:该对象在未赋值时,不能被访问;使用结束跳出该域后也不能访问</p>
</blockquote>
<h3 id="2-2-作用域分类"><a href="#2-2-作用域分类" class="headerlink" title="2.2 作用域分类"></a>2.2 作用域分类</h3><h4 id="2-2-1-L-local-局部作用域"><a href="#2-2-1-L-local-局部作用域" class="headerlink" title="2.2.1 L-local 局部作用域"></a>2.2.1 <code>L-local</code> 局部作用域</h4><h4 id="2-2-2-E-encloing-scope-闭包函数作用域-嵌套函数-A-B-var-c-中var-c所在作用域"><a href="#2-2-2-E-encloing-scope-闭包函数作用域-嵌套函数-A-B-var-c-中var-c所在作用域" class="headerlink" title="2.2.2  E-encloing scope 闭包函数作用域,嵌套函数(A(B(var c)))中var c所在作用域"></a>2.2.2  <code>E-encloing scope</code> 闭包函数作用域,嵌套函数<code>(A(B(var c)))</code>中<code>var c</code>所在作用域</h4><h4 id="2-2-3-G-global"><a href="#2-2-3-G-global" class="headerlink" title="2.2.3  G=global"></a>2.2.3  <code>G=global</code></h4><h4 id="2-2-4-B-built-in"><a href="#2-2-4-B-built-in" class="headerlink" title="2.2.4  B-built in"></a>2.2.4  <code>B-built in</code></h4><code>1.</code> 内置作用域的实现是通过<code>builtin</code>标准模块实现  <blockquote>
<p>但是此变量名本身并未放入内置作用域,需要导入模块才能使用<br><code>2.</code> <code>builtin</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> builtins</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(builtins)</span><br></pre></td></tr></table></figure>
<h3 id="2-3-规则"><a href="#2-3-规则" class="headerlink" title="2.3 规则"></a>2.3 规则</h3><code>1.</code> 当在函数中引用一个变量的时候，以上的作用域顺序也是 Python 搜索的一个顺序 <code>L-&gt;E-G-B</code>，首先尝试局部作用域，没找到的话，继续搜索闭包函数作用域，然后再是全局作用域和内置作用域。<br><code>2.</code> Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域</li>
<li>其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问(如<code>1.3.1.2</code>) 如:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    testStr = <span class="string">&#x27;this is a testline to test if this is a new region&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(testStr)</span><br><span class="line">this <span class="keyword">is</span> a testline to test <span class="keyword">if</span> this <span class="keyword">is</span> a new region</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas-basic</title>
    <url>/2021/07/07/PandasNotes/</url>
    <content><![CDATA[<h1 id="2142"><a href="#2142" class="headerlink" title="2142"></a>2142</h1><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>pandas有两种数据结构：Series and dataframe数据框</p>
<ul>
<li>Series<br>Series是一个一维标记数组，可以存储任何种类的数据  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_series = pd.Series([<span class="number">3</span>,-<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(my_series)  </span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a    <span class="number">3</span></span><br><span class="line">b   -<span class="number">5</span></span><br><span class="line">c    <span class="number">7</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
  Series中的数据可通过index找到  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(my_series[<span class="string">&#x27;d&#x27;</span>])</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>series类似于字典(当然这只是个人直观感受)</p>
</blockquote>
</li>
<li>dataframe是一个二维数据结构,包含不同的列  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;Country&#x27;</span> : [<span class="string">&#x27;Belgium&#x27;</span>, <span class="string">&#x27;India&#x27;</span>, <span class="string">&#x27;Brazil&#x27;</span> ],</span><br><span class="line">    <span class="string">&#x27;Capital&#x27;</span>: [<span class="string">&#x27;Brussels&#x27;</span>, <span class="string">&#x27;New   Delhi&#x27;</span>, <span class="string">&#x27;Brassilia&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Population&#x27;</span>: [<span class="number">1234</span>,<span class="number">1234</span>,<span class="number">1234</span>]&#125;</span><br><span class="line">datas = pd.DataFrame(data, columns=[<span class="string">&#x27;Country&#x27;</span>,<span class="string">&#x27;Capital&#x27;</span>,<span class="string">&#x27;Population&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(datas))</span><br><span class="line"><span class="built_in">print</span>(datas)</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">Country</span>    <span class="title">Capital</span>  <span class="title">Population</span></span></span><br><span class="line"><span class="class">0  <span class="title">Belgium</span>   <span class="title">Brussels</span>        1234</span></span><br><span class="line"><span class="class">1    <span class="title">India</span>  <span class="title">New</span> <span class="title">Delhi</span>        1234</span></span><br><span class="line"><span class="class">2   <span class="title">Brazil</span>  <span class="title">Brassilia</span>        1234</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建dataframe时,在写入或打印时会自动生成从第一行正式数据开始的行序号 and 第一列正式数据开始的列序号<br>dataframe类似于数组,可直接使用行列序号进行访问具体的数据</p>
</blockquote>
<h2 id="调用-读取数据"><a href="#调用-读取数据" class="headerlink" title="调用/读取数据"></a>调用/读取数据</h2></li>
<li>CSV文件  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd = pd.read_csv(<span class="string">&#x27;.//testdata/demo1.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pd.__class__)</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>xlsx文件  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;.//testdata/demo1.xlsx&#x27;</span> )</span><br><span class="line"><span class="built_in">print</span>(df.__class__)</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2>各类文件读取成为dataframe数据后可随意转存为其他格式的文件  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_cvs = pd.read_csv(<span class="string">&#x27;.//testdata/demo1.csv&#x27;</span> )</span><br><span class="line">df_xlsx = pd.read_excel(<span class="string">&#x27;.//testdata/demo1.xlsx&#x27;</span> )</span><br><span class="line"><span class="comment"># csv读取的文件保存为csv</span></span><br><span class="line">df_cvs.to_csv(<span class="string">&#x27;csv_to_csv.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># excel读取的数据保存为excel</span></span><br><span class="line">df_xlsx.to_excel(<span class="string">&#x27;xlsx_to_xlsx.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># csv读取的数据保存为excel</span></span><br><span class="line">df_cvs.to_excel(<span class="string">&#x27;csv_to_xlsx.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># excel读取的数据保存为csv</span></span><br><span class="line">df_xlsx.to_csv(<span class="string">&#x27;xlsx_to_csv.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建测试对象"><a href="#创建测试对象" class="headerlink" title="创建测试对象"></a>创建测试对象</h2>创建一个<code>20 × 5</code> 的随机数的数据框(dataframe)</li>
</ul>
<ol>
<li><p>使用np生成矩阵的形式创建dataframe’</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">20</span>, size=(<span class="number">20</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="built_in">print</span>(test_data)</span><br></pre></td></tr></table></figure></li>
<li><p>直接输入生成</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>,<span class="number">1005</span>,<span class="number">1006</span>], </span><br><span class="line"><span class="string">&quot;date&quot;</span>:pd.date_range(<span class="string">&#x27;20130102&#x27;</span>, periods=<span class="number">6</span>),</span><br><span class="line"><span class="string">&quot;city&quot;</span>:[<span class="string">&#x27;Beijing &#x27;</span>, <span class="string">&#x27;SH&#x27;</span>, <span class="string">&#x27; guangzhou &#x27;</span>, <span class="string">&#x27;Shenzhen&#x27;</span>, <span class="string">&#x27;shanghai&#x27;</span>, <span class="string">&#x27;BEIJING &#x27;</span>],</span><br><span class="line"><span class="string">&quot;age&quot;</span>:[<span class="number">23</span>,<span class="number">44</span>,<span class="number">54</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">32</span>],</span><br><span class="line"><span class="string">&quot;category&quot;</span>:[<span class="string">&#x27;100-A&#x27;</span>,<span class="string">&#x27;100-B&#x27;</span>,<span class="string">&#x27;110-A&#x27;</span>,<span class="string">&#x27;110-C&#x27;</span>,<span class="string">&#x27;210-A&#x27;</span>,<span class="string">&#x27;130-F&#x27;</span>],</span><br><span class="line"><span class="string">&quot;price&quot;</span>:[<span class="number">1200</span>,np.nan,<span class="number">2133</span>,<span class="number">5433</span>,np.nan,<span class="number">4432</span>]&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>可在{}内数据内容后添加<code>columns =[&#39;id&#39;,&#39;date&#39;,&#39;city&#39;,&#39;category&#39;,&#39;age&#39;,&#39;price&#39;]</code>,借此自定义dataframe内数据的列次序<h3 id="统计数据函数"><a href="#统计数据函数" class="headerlink" title="统计数据函数"></a>统计数据函数</h3></li>
</ul>
</li>
<li><p>df.info() :本函数提供dataframe的以下信息:</p>
<ul>
<li>RangeIndex:有多少数据</li>
<li>Data Columns:指定找到多少列</li>
<li>Columns:提供关于columns的信息</li>
<li>dtypes:提供dataframe内的数据类型</li>
<li>memory usage:表明内存使用量<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">20</span>, size=(<span class="number">20</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="built_in">print</span>(test_data.info()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">20</span> entries, <span class="number">0</span> to <span class="number">19</span></span><br><span class="line">Data columns (total <span class="number">5</span> columns):</span><br><span class="line"><span class="comment">#   Column  Non-Null Count  Dtype</span></span><br><span class="line">---  ------  --------------  -----</span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">3</span>   <span class="number">3</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">4</span>   <span class="number">4</span>       <span class="number">20</span> non-null     int32</span><br><span class="line">dtypes: int32(<span class="number">5</span>)</span><br><span class="line">memory usage: <span class="number">528.0</span> <span class="built_in">bytes</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>df.shape</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(test_data.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">20</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类似于数组,shape作为属性,而非函数</p>
</blockquote>
</li>
<li><p>df.index():显示找到的索引信息</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.index)</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RangeIndex(start=<span class="number">0</span>, stop=<span class="number">20</span>, step=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>index作为属性 not callable</p>
</blockquote>
</li>
<li><p>df.count():给出每一列中有多少数据</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.count())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">20</span></span><br><span class="line"><span class="number">1</span>    <span class="number">20</span></span><br><span class="line"><span class="number">2</span>    <span class="number">20</span></span><br><span class="line"><span class="number">3</span>    <span class="number">20</span></span><br><span class="line"><span class="number">4</span>    <span class="number">20</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li>
<li><p>df.sum():给出每一列中的求和</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.sum())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">200</span></span><br><span class="line"><span class="number">1</span>    <span class="number">119</span></span><br><span class="line"><span class="number">2</span>    <span class="number">240</span></span><br><span class="line"><span class="number">3</span>    <span class="number">214</span></span><br><span class="line"><span class="number">4</span>    <span class="number">204</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li>
<li><p>df.sum():给出每一列中的求和</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.sum())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">200</span></span><br><span class="line"><span class="number">1</span>    <span class="number">119</span></span><br><span class="line"><span class="number">2</span>    <span class="number">240</span></span><br><span class="line"><span class="number">3</span>    <span class="number">214</span></span><br><span class="line"><span class="number">4</span>    <span class="number">204</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li>
<li><p>df.cumsum()<br> 给出依次将每列前n行求和的结果</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.cumsum())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span></span><br><span class="line"><span class="built_in">id</span>       date                                           city                        category  age    price     </span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02                                       Beijing                            <span class="number">100</span>-A   <span class="number">23</span>   <span class="number">1200.0</span>     </span><br><span class="line"><span class="number">1</span>  <span class="number">2003</span> <span class="number">2056</span>-01-05                                     Beijing SH                      <span class="number">100</span>-A100-B   <span class="number">67</span>      NaN     </span><br><span class="line"><span class="number">2</span>  <span class="number">3006</span> <span class="number">2099</span>-01-08                          Beijing SH guangzhou                  <span class="number">100</span>-A100-B110-A  <span class="number">121</span>   <span class="number">3333.0</span>     </span><br><span class="line"><span class="number">3</span>  <span class="number">4010</span> <span class="number">2142</span>-01-<span class="number">13</span>                  Beijing SH guangzhou Shenzhen            <span class="number">100</span>-A100-B110-A110-C  <span class="number">153</span>   <span class="number">8766.0</span>     </span><br><span class="line"><span class="number">4</span>  <span class="number">5015</span> <span class="number">2185</span>-01-<span class="number">18</span>          Beijing SH guangzhou Shenzhenshanghai       <span class="number">100</span>-A100-B110-A110-C210-A  <span class="number">187</span>      NaN     </span><br><span class="line"><span class="number">5</span>  <span class="number">6021</span> <span class="number">2228</span>-01-<span class="number">26</span>  Beijing SH guangzhou ShenzhenshanghaiBEIJING   <span class="number">100</span>-A100-B110-A110-C210-A130-F  <span class="number">219</span>  <span class="number">13198.0</span> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>所得结果依然为dataframe</p>
</blockquote>
<ol>
<li>指定列时，只计算该列的累加值:<blockquote>
<p>tar = df[‘id’].cumsum()</p>
</blockquote>
</li>
<li>不指定列时，则将返回各列的累加值</li>
</ol>
</li>
<li><p>df.min():给出每列中的最小值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>                         <span class="number">1001</span></span><br><span class="line">date        <span class="number">2013</span>-01-02 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">city                 guangzhou </span><br><span class="line">category                  <span class="number">100</span>-A</span><br><span class="line">age                          <span class="number">23</span></span><br><span class="line">price                    <span class="number">1200.0</span></span><br><span class="line">dtype: <span class="built_in">object</span> </span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>所得结果为Series</p>
</blockquote>
</li>
<li><p>df.describe():函数提供了有关数据的基本统计信息（基于列计算）：count、mean、std、min、25%、50%、75%、max</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">            <span class="built_in">id</span>       age        price</span><br><span class="line">count     <span class="number">6.000000</span>   <span class="number">6.00000</span>     <span class="number">4.000000</span></span><br><span class="line">mean   <span class="number">1003.500000</span>  <span class="number">36.50000</span>  <span class="number">3299.500000</span></span><br><span class="line">std       <span class="number">1.870829</span>  <span class="number">10.87658</span>  <span class="number">1966.638503</span></span><br><span class="line"><span class="built_in">min</span>    <span class="number">1001.000000</span>  <span class="number">23.00000</span>  <span class="number">1200.000000</span></span><br><span class="line"><span class="number">25</span>%    <span class="number">1002.250000</span>  <span class="number">32.00000</span>  <span class="number">1899.750000</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">1003.500000</span>  <span class="number">33.00000</span>  <span class="number">3282.500000</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">1004.750000</span>  <span class="number">41.50000</span>  <span class="number">4682.250000</span></span><br><span class="line"><span class="built_in">max</span>    <span class="number">1006.000000</span>  <span class="number">54.00000</span>  <span class="number">5433.000000</span> </span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.mean():给出每列中的均值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar = df.mean()</span><br><span class="line"><span class="built_in">id</span>       <span class="number">1003.5</span></span><br><span class="line">age        <span class="number">36.5</span></span><br><span class="line">price    <span class="number">3299.5</span></span><br><span class="line">dtype: float64</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>只针对dataframe中的数字</p>
</blockquote>
</li>
<li><p>df.median():给出每列中的中位数  </p>
<blockquote>
</blockquote>
</li>
<li><p>df.quantlie([0.25, 0.75]):给出每列中的25% 和 75%的分位数</p>
<blockquote>
</blockquote>
</li>
<li><p>df.var()–方差值</p>
<blockquote>
</blockquote>
</li>
<li><p>df.std()–标准差值</p>
<blockquote>
</blockquote>
</li>
<li><p>df.cummin()–返回前n行的最小值</p>
<blockquote>
</blockquote>
</li>
<li><p>len(df):确定列的行数</p>
<blockquote>
<p>len(df[‘columnId’]):返回某列的行数</p>
</blockquote>
</li>
<li><p>df.count():返回Nan值个数</p>
<blockquote>
</blockquote>
</li>
<li><p>df.isnull():返回dataframe中各值是否为null</p>
<blockquote>
<p>return DataFrame</p>
</blockquote>
</li>
<li><p>df.corr():返回各列之间的相关系数</p>
<h3 id="pandas中的选择与过滤"><a href="#pandas中的选择与过滤" class="headerlink" title="pandas中的选择与过滤"></a>pandas中的选择与过滤</h3></li>
<li><p>Series: mySeries[‘index’]–返回索引值为’index’的value</p>
<blockquote>
</blockquote>
</li>
<li><p>df[n:N]–返回行n到N-1的dataframe</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =df[<span class="number">2</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.head()–返回dataframe中的前几行,默认为5行</p>
</li>
<li><p>df.tail()</p>
</li>
<li><p>df.sample()–随机选取几行,按频数</p>
</li>
<li><p>create filter–创建一个过滤条件</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filters = df.<span class="built_in">id</span> &gt; <span class="number">1003</span></span><br><span class="line">df[<span class="built_in">filter</span>]</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05  Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06  shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07  BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span> </span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.filter(regex = ‘code’)–表示regex = ‘code’的列通过过滤条件</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar = df.<span class="built_in">filter</span>(regex=<span class="string">&#x27;date&#x27;</span>).head()</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">        date</span><br><span class="line"><span class="number">0</span> <span class="number">2013</span>-01-02</span><br><span class="line"><span class="number">1</span> <span class="number">2013</span>-01-03</span><br><span class="line"><span class="number">2</span> <span class="number">2013</span>-01-04</span><br><span class="line"><span class="number">3</span> <span class="number">2013</span>-01-05</span><br><span class="line"><span class="number">4</span> <span class="number">2013</span>-01-06</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>np.logicl_and(filter1, filter2)–并行多个filter</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =df[np.logical_and(df[<span class="string">&#x27;id&#x27;</span>] &gt; <span class="number">1003</span>, df[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">33</span>)]</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06  shanghai    <span class="number">210</span>-A   <span class="number">34</span>    NaN</span><br></pre></td></tr></table></figure></li>
<li><p>df[(filter1) &amp; (filter2)]</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =df[(df[<span class="string">&#x27;id&#x27;</span>] &gt; <span class="number">1003</span>) &amp; (df[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">33</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="sort-data"><a href="#sort-data" class="headerlink" title="sort data"></a>sort data</h3></li>
<li><p>df.sort_values(‘columnName’, ascending=True)</p>
<ul>
<li>对columnName列排序</li>
<li>ascending=true表示升序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_values(<span class="string">&#x27;age&#x27;</span>, ascending=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">     <span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span></span><br><span class="line">    <span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>df.sort_index()</p>
<ul>
<li>对索引按照默认升序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_index()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 重命名&amp;定义\修改新的列</span></span><br><span class="line"><span class="number">1.</span> df.rename(columns = &#123;<span class="string">&#x27;oldColumnName&#x27;</span>:<span class="string">&#x27;newColumnName&#x27;</span>&#125;)</span><br><span class="line">   * 重命名</span><br><span class="line"> <span class="number">9</span>   ```python</span><br><span class="line">    tar = df.rename(columns = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;newId&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>df[‘newColume’] = newDesignWay</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;thisisanewcolumn&#x27;</span>] = pd.Series(np.arange(<span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">     <span class="built_in">id</span>       date         city category  age   price  thisisanewcolumn</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span>                 <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN                 <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span>                 <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span>                 <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN                 <span class="number">4</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span>                 <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.index.name = “index_name”</p>
<ul>
<li>修改index为新index<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    ```</span><br><span class="line"><span class="number">4.</span> df.columns = <span class="built_in">map</span>(<span class="built_in">str</span>.lower, df.columns)</span><br><span class="line">    * 所有列名变大写字母</span><br><span class="line">    ```python</span><br><span class="line">    df.columns = <span class="built_in">map</span>(<span class="built_in">str</span>.lower, df.columns)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>map()–python的内置函数,接受一个function,数个待迭代的list,使用function对list进行处理得到新的list,并不改变原list</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="Drop-Data"><a href="#Drop-Data" class="headerlink" title="Drop Data"></a>Drop Data</h3><ol>
<li>df.drop(columns=[‘columnName’])<ul>
<li>指定删除某列数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar = df.drop(columns=[<span class="string">&#x27;Id&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>mySeries.drop([‘a’])<ul>
<li>指定删除索引值指向的value</li>
</ul>
</li>
<li>f.drop(‘Volume’, axis=1)<ul>
<li>删除一个变量\一个量<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =  df.drop(<span class="string">&#x27;Id&#x27;</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="转换数据类型"><a href="#转换数据类型" class="headerlink" title="转换数据类型"></a>转换数据类型</h3></li>
</ul>
</li>
<li>df.dtypes<br> dataframe内各列的数据类型</li>
<li>df[‘columnName’] = df[‘columnName’].astype(‘dataType’)<ul>
<li>转换指定行的数据类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Id&#x27;</span>] = df[<span class="string">&#x27;Id&#x27;</span>].astype(<span class="string">&#x27;float&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h3></li>
</ul>
</li>
<li>方法1–自定义def函数 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">examples</span>(<span class="params">x</span>):</span>   <span class="comment">#create a function</span></span><br><span class="line"><span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">df.Open.apply(examples).head()  <span class="comment">#use the function with apply()  </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>自定义函数后,df.ColumnName获取df中需要使用此函数的列,再对此列使用apply函数,传入需要使用的函数</p>
</blockquote>
</li>
<li>lambda函数 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.Open.apply(<span class="keyword">lambda</span> x: x*<span class="number">2</span>).head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>df.ColumnName获取df中需要使用此函数的列,再对此列使用lambda 声明数据处理方法</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
        <category>pandas</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyhont-Recursion</title>
    <url>/2021/07/07/Recursion/</url>
    <content><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>计算阶乘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">cal</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> n * cal(n - <span class="number">1</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(cal(<span class="number">4</span>))</span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(cal(<span class="number">6</span>))</span><br><span class="line"><span class="number">720</span></span><br></pre></td></tr></table></figure>
<ul>
<li>递归函数内部会调用函数本身</li>
<li>某次调用递归函数时,内部调用本身时会指定参数</li>
<li>在递归函数中,应有一个结束参数信号,在每次递归中,参数不断靠近该信号<h2 id="递归次数限制"><a href="#递归次数限制" class="headerlink" title="递归次数限制"></a>递归次数限制</h2><code>python</code>递归次数限制为<code>3000</code>次,超出此次数则会触发<code>RecursionError</code><h2 id="移除递归次数限制"><a href="#移除递归次数限制" class="headerlink" title="移除递归次数限制"></a>移除递归次数限制</h2><code>sys.setrecursionlimit(5000)</code> 设置次数限制为我们所需要的次数</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyhont-Set</title>
    <url>/2021/07/07/Set/</url>
    <content><![CDATA[<h1 id="集合-set"><a href="#集合-set" class="headerlink" title="集合-set"></a>集合-set</h1><p>集合的基本性质:<br><code>1.</code> 集合包含了不重复且无序的元素<br><code>2.</code> 集合是可变数据类型  </p>
<ul>
<li>但是其内部元素必须是不可变数据类型,即元组可以作为其元素,但是列表 集合 字典不能作为其元素  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>]&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1. 创建集合"></a>1. 创建集合</h2></li>
<li>使用<code>&#123;&#125;</code>创建集合,内部元素使用<code>,</code>分隔</li>
<li>使用python内置函数<code>set()</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,tuplle1&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="string">&#x27;SS&#x27;</span>,tuplle1])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.__class__, b.__class__)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">set</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">set</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-修改集合"><a href="#2-修改集合" class="headerlink" title="2. 修改集合"></a>2. 修改集合</h2></li>
<li>不能通过索引 切片操作来访问其中的元素,因为集合是无序的<h3 id="2-1-添加元素"><a href="#2-1-添加元素" class="headerlink" title="2.1 添加元素"></a>2.1 添加元素</h3><code>1.</code> <code>add()</code>方法添加单个元素<br><code>2.</code> <code>update()</code>方法添加多个元素<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,tuplle1&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.add(<span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>集合内不重复的性质会自动去掉update()参数中的重复元素</p>
</blockquote>
<h3 id="2-2-删除元素"><a href="#2-2-删除元素" class="headerlink" title="2.2 删除元素"></a>2.2 删除元素</h3><code>1.</code> <code>discard()</code><br><code>2.</code> <code>remove()</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.discard(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.discard(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">11</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">11</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>二者差别在于,当被去除元素不存在时,<code>discard</code>不会报错,<code>remove</code>报错</p>
</blockquote>
</li>
</ul>
<p><code>3.</code> <code>pop()</code>:去掉任意一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><code>4.</code> <code>clear()</code> 清空结合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.update([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.clear()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>

<h3 id="2-3-集合的逻辑操作"><a href="#2-3-集合的逻辑操作" class="headerlink" title="2.3 集合的逻辑操作"></a>2.3 集合的逻辑操作</h3><p><code>1.</code> <code>&amp;</code> / <code>intersection</code> – 交集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x&amp;y)</span><br><span class="line"><span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x.intersection(y))</span><br><span class="line"><span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.update([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x.intersection(y))</span><br><span class="line">&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当二者无交集,则返回空<code>set</code></p>
</blockquote>
<p><code>2.</code> <code>-</code> / <code>difference</code> – 差集:只在其一集合中出现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">y = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x-y)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x.difference(y))</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>3.</code> <code>^</code> / <code>symmetric_difference</code> – 对称差集:不同时出现在两个集合的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x^y, x.symmetric_difference(y))</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>4.</code> <code>union()</code> – 求并集</p>
<h2 id="3-不可变集合"><a href="#3-不可变集合" class="headerlink" title="3 不可变集合"></a>3 不可变集合</h2><ul>
<li>由于集合的元素可变,所以无法作为字典的键值</li>
<li>采用<code>frozenset()</code>可以创建不可变元素的不可变集合  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">frozenset</span>(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyhont-ArrDictionaryay</title>
    <url>/2021/07/07/dictionary/</url>
    <content><![CDATA[<h1 id="字典-Dictionary"><a href="#字典-Dictionary" class="headerlink" title="字典-Dictionary"></a>字典-Dictionary</h1><p>字典的基本性质:</p>
<ul>
<li>字典是python的内置数据类型</li>
<li>字典的数据是键值对一一对应,根据键索引指定值<h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><code>1.</code> 使用<code>&#123;&#125;</code>创建字典,声明其类型</li>
<li>字典键是不可变数据类型,用元组或不可变集合创建</li>
<li>字典值是可变数据类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="number">1</span>:<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">type</span>(dict1))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">dict1[<span class="number">1</span>]</span>)</span></span><br><span class="line"><span class="class"><span class="title">value1</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>键只能是不可变数据类型:元组 不可变集合<br>值都可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;tp1:tp1&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(dict1, dict1.__class__)</span><br><span class="line">&#123;(<span class="number">3</span>, <span class="number">2</span>, <span class="number">11</span>): (<span class="number">3</span>, <span class="number">2</span>, <span class="number">11</span>)&#125; &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>2.</code> 使用<code>dict()</code>初始化字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;Blue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;Pink&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h2><h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;Blue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;Pink&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">3</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><code>[]</code>索引找不到值则报错</p>
<h3 id="get"><a href="#get" class="headerlink" title="get()"></a><code>get()</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;Blue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;Pink&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;Blue&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;Blue&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">3</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(d.get(<span class="number">3</span>))</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>当<code>.get()</code>方法找不到值,则返回<code>None</code></p>
<h3 id="更新值"><a href="#更新值" class="headerlink" title="更新值"></a>更新值</h3><p>使用键定位,更新值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;Blue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">1</span>] = <span class="string">&#x27;cjblue&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(d)</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>直接使用新键,则添加新值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">5</span>] = <span class="string">&#x27;marklily&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;marklily&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><code>1.</code> <code>pop()</code> 删除并返回给定键的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;Pink&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;marklily&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;Pink&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;marklily&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>2.</code> <code>popitem()</code> 删除并返回任意一个键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;marklily&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;floyd&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;floyd&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;marklily&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;pink&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>3.</code> <code>clear()</code> 删除所有元素但不删除字典本身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><code>4.</code> <code>del</code> 删除特定键值对或删除整个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;cjblue&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;marklily&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;floyd&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="number">5</span>: <span class="string">&#x27;marklily&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;pink&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;floyd&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;d&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
