<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pandas</title>
    <url>/2021/07/06/PandasNotes/</url>
    <content><![CDATA[<p>#2208</p>
<h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>pandas有两种数据结构：Series and dataframe数据框</p>
<ul>
<li>Series<br>Series是一个一维标记数组，可以存储任何种类的数据  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_series = pd.Series([<span class="number">3</span>,-<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(my_series)  </span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a    <span class="number">3</span></span><br><span class="line">b   -<span class="number">5</span></span><br><span class="line">c    <span class="number">7</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
  Series中的数据可通过index找到  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(my_series[<span class="string">&#x27;d&#x27;</span>])</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>series类似于字典(当然这只是个人直观感受)</p>
</blockquote>
</li>
<li>dataframe是一个二维数据结构,包含不同的列  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;Country&#x27;</span> : [<span class="string">&#x27;Belgium&#x27;</span>, <span class="string">&#x27;India&#x27;</span>, <span class="string">&#x27;Brazil&#x27;</span> ],</span><br><span class="line">    <span class="string">&#x27;Capital&#x27;</span>: [<span class="string">&#x27;Brussels&#x27;</span>, <span class="string">&#x27;New   Delhi&#x27;</span>, <span class="string">&#x27;Brassilia&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;Population&#x27;</span>: [<span class="number">1234</span>,<span class="number">1234</span>,<span class="number">1234</span>]&#125;</span><br><span class="line">datas = pd.DataFrame(data, columns=[<span class="string">&#x27;Country&#x27;</span>,<span class="string">&#x27;Capital&#x27;</span>,<span class="string">&#x27;Population&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(datas))</span><br><span class="line"><span class="built_in">print</span>(datas)</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">Country</span>    <span class="title">Capital</span>  <span class="title">Population</span></span></span><br><span class="line"><span class="class">0  <span class="title">Belgium</span>   <span class="title">Brussels</span>        1234</span></span><br><span class="line"><span class="class">1    <span class="title">India</span>  <span class="title">New</span> <span class="title">Delhi</span>        1234</span></span><br><span class="line"><span class="class">2   <span class="title">Brazil</span>  <span class="title">Brassilia</span>        1234</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建dataframe时,在写入或打印时会自动生成从第一行正式数据开始的行序号 and 第一列正式数据开始的列序号<br>dataframe类似于数组,可直接使用行列序号进行访问具体的数据</p>
</blockquote>
<h2 id="调用-读取数据"><a href="#调用-读取数据" class="headerlink" title="调用/读取数据"></a>调用/读取数据</h2></li>
<li>CSV文件  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd = pd.read_csv(<span class="string">&#x27;.//testdata/demo1.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pd.__class__)</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>xlsx文件  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;.//testdata/demo1.xlsx&#x27;</span> )</span><br><span class="line"><span class="built_in">print</span>(df.__class__)</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2>各类文件读取成为dataframe数据后可随意转存为其他格式的文件  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_cvs = pd.read_csv(<span class="string">&#x27;.//testdata/demo1.csv&#x27;</span> )</span><br><span class="line">df_xlsx = pd.read_excel(<span class="string">&#x27;.//testdata/demo1.xlsx&#x27;</span> )</span><br><span class="line"><span class="comment"># csv读取的文件保存为csv</span></span><br><span class="line">df_cvs.to_csv(<span class="string">&#x27;csv_to_csv.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># excel读取的数据保存为excel</span></span><br><span class="line">df_xlsx.to_excel(<span class="string">&#x27;xlsx_to_xlsx.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># csv读取的数据保存为excel</span></span><br><span class="line">df_cvs.to_excel(<span class="string">&#x27;csv_to_xlsx.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># excel读取的数据保存为csv</span></span><br><span class="line">df_xlsx.to_csv(<span class="string">&#x27;xlsx_to_csv.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建测试对象"><a href="#创建测试对象" class="headerlink" title="创建测试对象"></a>创建测试对象</h2>创建一个<code>20 × 5</code> 的随机数的数据框(dataframe)</li>
</ul>
<ol>
<li><p>使用np生成矩阵的形式创建dataframe’</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">20</span>, size=(<span class="number">20</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="built_in">print</span>(test_data)</span><br></pre></td></tr></table></figure></li>
<li><p>直接输入生成</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;id&quot;</span>:[<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>,<span class="number">1005</span>,<span class="number">1006</span>], </span><br><span class="line"><span class="string">&quot;date&quot;</span>:pd.date_range(<span class="string">&#x27;20130102&#x27;</span>, periods=<span class="number">6</span>),</span><br><span class="line"><span class="string">&quot;city&quot;</span>:[<span class="string">&#x27;Beijing &#x27;</span>, <span class="string">&#x27;SH&#x27;</span>, <span class="string">&#x27; guangzhou &#x27;</span>, <span class="string">&#x27;Shenzhen&#x27;</span>, <span class="string">&#x27;shanghai&#x27;</span>, <span class="string">&#x27;BEIJING &#x27;</span>],</span><br><span class="line"><span class="string">&quot;age&quot;</span>:[<span class="number">23</span>,<span class="number">44</span>,<span class="number">54</span>,<span class="number">32</span>,<span class="number">34</span>,<span class="number">32</span>],</span><br><span class="line"><span class="string">&quot;category&quot;</span>:[<span class="string">&#x27;100-A&#x27;</span>,<span class="string">&#x27;100-B&#x27;</span>,<span class="string">&#x27;110-A&#x27;</span>,<span class="string">&#x27;110-C&#x27;</span>,<span class="string">&#x27;210-A&#x27;</span>,<span class="string">&#x27;130-F&#x27;</span>],</span><br><span class="line"><span class="string">&quot;price&quot;</span>:[<span class="number">1200</span>,np.nan,<span class="number">2133</span>,<span class="number">5433</span>,np.nan,<span class="number">4432</span>]&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>可在{}内数据内容后添加<code>columns =[&#39;id&#39;,&#39;date&#39;,&#39;city&#39;,&#39;category&#39;,&#39;age&#39;,&#39;price&#39;]</code>,借此自定义dataframe内数据的列次序<h3 id="统计数据函数"><a href="#统计数据函数" class="headerlink" title="统计数据函数"></a>统计数据函数</h3></li>
</ul>
</li>
<li><p>df.info() :本函数提供dataframe的以下信息:</p>
<ul>
<li>RangeIndex:有多少数据</li>
<li>Data Columns:指定找到多少列</li>
<li>Columns:提供关于columns的信息</li>
<li>dtypes:提供dataframe内的数据类型</li>
<li>memory usage:表明内存使用量<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">20</span>, size=(<span class="number">20</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="built_in">print</span>(test_data.info()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">20</span> entries, <span class="number">0</span> to <span class="number">19</span></span><br><span class="line">Data columns (total <span class="number">5</span> columns):</span><br><span class="line"><span class="comment">#   Column  Non-Null Count  Dtype</span></span><br><span class="line">---  ------  --------------  -----</span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">3</span>   <span class="number">3</span>       <span class="number">20</span> non-null     int32</span><br><span class="line"><span class="number">4</span>   <span class="number">4</span>       <span class="number">20</span> non-null     int32</span><br><span class="line">dtypes: int32(<span class="number">5</span>)</span><br><span class="line">memory usage: <span class="number">528.0</span> <span class="built_in">bytes</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>df.shape</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(test_data.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">20</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类似于数组,shape作为属性,而非函数</p>
</blockquote>
</li>
<li><p>df.index():显示找到的索引信息</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.index)</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RangeIndex(start=<span class="number">0</span>, stop=<span class="number">20</span>, step=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>index作为属性 not callable</p>
</blockquote>
</li>
<li><p>df.count():给出每一列中有多少数据</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.count())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">20</span></span><br><span class="line"><span class="number">1</span>    <span class="number">20</span></span><br><span class="line"><span class="number">2</span>    <span class="number">20</span></span><br><span class="line"><span class="number">3</span>    <span class="number">20</span></span><br><span class="line"><span class="number">4</span>    <span class="number">20</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li>
<li><p>df.sum():给出每一列中的求和</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.sum())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">200</span></span><br><span class="line"><span class="number">1</span>    <span class="number">119</span></span><br><span class="line"><span class="number">2</span>    <span class="number">240</span></span><br><span class="line"><span class="number">3</span>    <span class="number">214</span></span><br><span class="line"><span class="number">4</span>    <span class="number">204</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li>
<li><p>df.sum():给出每一列中的求和</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.sum())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">200</span></span><br><span class="line"><span class="number">1</span>    <span class="number">119</span></span><br><span class="line"><span class="number">2</span>    <span class="number">240</span></span><br><span class="line"><span class="number">3</span>    <span class="number">214</span></span><br><span class="line"><span class="number">4</span>    <span class="number">204</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></li>
<li><p>df.cumsum()<br> 给出依次将每列前n行求和的结果</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(test_data.cumsum())</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span></span><br><span class="line"><span class="built_in">id</span>       date                                           city                        category  age    price     </span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02                                       Beijing                            <span class="number">100</span>-A   <span class="number">23</span>   <span class="number">1200.0</span>     </span><br><span class="line"><span class="number">1</span>  <span class="number">2003</span> <span class="number">2056</span>-01-05                                     Beijing SH                      <span class="number">100</span>-A100-B   <span class="number">67</span>      NaN     </span><br><span class="line"><span class="number">2</span>  <span class="number">3006</span> <span class="number">2099</span>-01-08                          Beijing SH guangzhou                  <span class="number">100</span>-A100-B110-A  <span class="number">121</span>   <span class="number">3333.0</span>     </span><br><span class="line"><span class="number">3</span>  <span class="number">4010</span> <span class="number">2142</span>-01-<span class="number">13</span>                  Beijing SH guangzhou Shenzhen            <span class="number">100</span>-A100-B110-A110-C  <span class="number">153</span>   <span class="number">8766.0</span>     </span><br><span class="line"><span class="number">4</span>  <span class="number">5015</span> <span class="number">2185</span>-01-<span class="number">18</span>          Beijing SH guangzhou Shenzhenshanghai       <span class="number">100</span>-A100-B110-A110-C210-A  <span class="number">187</span>      NaN     </span><br><span class="line"><span class="number">5</span>  <span class="number">6021</span> <span class="number">2228</span>-01-<span class="number">26</span>  Beijing SH guangzhou ShenzhenshanghaiBEIJING   <span class="number">100</span>-A100-B110-A110-C210-A130-F  <span class="number">219</span>  <span class="number">13198.0</span> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>所得结果依然为dataframe</p>
</blockquote>
<ol>
<li>指定列时，只计算该列的累加值:<blockquote>
<p>tar = df[‘id’].cumsum()</p>
</blockquote>
</li>
<li>不指定列时，则将返回各列的累加值</li>
</ol>
</li>
<li><p>df.min():给出每列中的最小值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>                         <span class="number">1001</span></span><br><span class="line">date        <span class="number">2013</span>-01-02 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">city                 guangzhou </span><br><span class="line">category                  <span class="number">100</span>-A</span><br><span class="line">age                          <span class="number">23</span></span><br><span class="line">price                    <span class="number">1200.0</span></span><br><span class="line">dtype: <span class="built_in">object</span> </span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>所得结果为Series</p>
</blockquote>
</li>
<li><p>df.describe():函数提供了有关数据的基本统计信息（基于列计算）：count、mean、std、min、25%、50%、75%、max</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">            <span class="built_in">id</span>       age        price</span><br><span class="line">count     <span class="number">6.000000</span>   <span class="number">6.00000</span>     <span class="number">4.000000</span></span><br><span class="line">mean   <span class="number">1003.500000</span>  <span class="number">36.50000</span>  <span class="number">3299.500000</span></span><br><span class="line">std       <span class="number">1.870829</span>  <span class="number">10.87658</span>  <span class="number">1966.638503</span></span><br><span class="line"><span class="built_in">min</span>    <span class="number">1001.000000</span>  <span class="number">23.00000</span>  <span class="number">1200.000000</span></span><br><span class="line"><span class="number">25</span>%    <span class="number">1002.250000</span>  <span class="number">32.00000</span>  <span class="number">1899.750000</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">1003.500000</span>  <span class="number">33.00000</span>  <span class="number">3282.500000</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">1004.750000</span>  <span class="number">41.50000</span>  <span class="number">4682.250000</span></span><br><span class="line"><span class="built_in">max</span>    <span class="number">1006.000000</span>  <span class="number">54.00000</span>  <span class="number">5433.000000</span> </span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.mean():给出每列中的均值</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar = df.mean()</span><br><span class="line"><span class="built_in">id</span>       <span class="number">1003.5</span></span><br><span class="line">age        <span class="number">36.5</span></span><br><span class="line">price    <span class="number">3299.5</span></span><br><span class="line">dtype: float64</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>只针对dataframe中的数字</p>
</blockquote>
</li>
<li><p>df.median():给出每列中的中位数  </p>
<blockquote>
</blockquote>
</li>
<li><p>df.quantlie([0.25, 0.75]):给出每列中的25% 和 75%的分位数</p>
<blockquote>
</blockquote>
</li>
<li><p>df.var()–方差值</p>
<blockquote>
</blockquote>
</li>
<li><p>df.std()–标准差值</p>
<blockquote>
</blockquote>
</li>
<li><p>df.cummin()–返回前n行的最小值</p>
<blockquote>
</blockquote>
</li>
<li><p>len(df):确定列的行数</p>
<blockquote>
<p>len(df[‘columnId’]):返回某列的行数</p>
</blockquote>
</li>
<li><p>df.count():返回Nan值个数</p>
<blockquote>
</blockquote>
</li>
<li><p>df.isnull():返回dataframe中各值是否为null</p>
<blockquote>
<p>return DataFrame</p>
</blockquote>
</li>
<li><p>df.corr():返回各列之间的相关系数</p>
<h3 id="pandas中的选择与过滤"><a href="#pandas中的选择与过滤" class="headerlink" title="pandas中的选择与过滤"></a>pandas中的选择与过滤</h3></li>
<li><p>Series: mySeries[‘index’]–返回索引值为’index’的value</p>
<blockquote>
</blockquote>
</li>
<li><p>df[n:N]–返回行n到N-1的dataframe</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =df[<span class="number">2</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.head()–返回dataframe中的前几行,默认为5行</p>
</li>
<li><p>df.tail()</p>
</li>
<li><p>df.sample()–随机选取几行,按频数</p>
</li>
<li><p>create filter–创建一个过滤条件</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filters = df.<span class="built_in">id</span> &gt; <span class="number">1003</span></span><br><span class="line">df[<span class="built_in">filter</span>]</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05  Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06  shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07  BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span> </span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.filter(regex = ‘code’)–表示regex = ‘code’的列通过过滤条件</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar = df.<span class="built_in">filter</span>(regex=<span class="string">&#x27;date&#x27;</span>).head()</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">        date</span><br><span class="line"><span class="number">0</span> <span class="number">2013</span>-01-02</span><br><span class="line"><span class="number">1</span> <span class="number">2013</span>-01-03</span><br><span class="line"><span class="number">2</span> <span class="number">2013</span>-01-04</span><br><span class="line"><span class="number">3</span> <span class="number">2013</span>-01-05</span><br><span class="line"><span class="number">4</span> <span class="number">2013</span>-01-06</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>np.logicl_and(filter1, filter2)–并行多个filter</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =df[np.logical_and(df[<span class="string">&#x27;id&#x27;</span>] &gt; <span class="number">1003</span>, df[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">33</span>)]</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06  shanghai    <span class="number">210</span>-A   <span class="number">34</span>    NaN</span><br></pre></td></tr></table></figure></li>
<li><p>df[(filter1) &amp; (filter2)]</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =df[(df[<span class="string">&#x27;id&#x27;</span>] &gt; <span class="number">1003</span>) &amp; (df[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">33</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="sort-data"><a href="#sort-data" class="headerlink" title="sort data"></a>sort data</h3></li>
<li><p>df.sort_values(‘columnName’, ascending=True)</p>
<ul>
<li>对columnName列排序</li>
<li>ascending=true表示升序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_values(<span class="string">&#x27;age&#x27;</span>, ascending=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">     <span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span></span><br><span class="line">    <span class="built_in">id</span>       date         city category  age   price</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>df.sort_index()</p>
<ul>
<li>对索引按照默认升序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_index()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 重命名&amp;定义\修改新的列</span></span><br><span class="line"><span class="number">1.</span> df.rename(columns = &#123;<span class="string">&#x27;oldColumnName&#x27;</span>:<span class="string">&#x27;newColumnName&#x27;</span>&#125;)</span><br><span class="line">   * 重命名</span><br><span class="line"> <span class="number">9</span>   ```python</span><br><span class="line">    tar = df.rename(columns = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;newId&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>df[‘newColume’] = newDesignWay</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;thisisanewcolumn&#x27;</span>] = pd.Series(np.arange(<span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">     <span class="built_in">id</span>       date         city category  age   price  thisisanewcolumn</span><br><span class="line"><span class="number">0</span>  <span class="number">1001</span> <span class="number">2013</span>-01-02     Beijing     <span class="number">100</span>-A   <span class="number">23</span>  <span class="number">1200.0</span>                 <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1002</span> <span class="number">2013</span>-01-03           SH    <span class="number">100</span>-B   <span class="number">44</span>     NaN                 <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1003</span> <span class="number">2013</span>-01-04   guangzhou     <span class="number">110</span>-A   <span class="number">54</span>  <span class="number">2133.0</span>                 <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1004</span> <span class="number">2013</span>-01-05     Shenzhen    <span class="number">110</span>-C   <span class="number">32</span>  <span class="number">5433.0</span>                 <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1005</span> <span class="number">2013</span>-01-06     shanghai    <span class="number">210</span>-A   <span class="number">34</span>     NaN                 <span class="number">4</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1006</span> <span class="number">2013</span>-01-07     BEIJING     <span class="number">130</span>-F   <span class="number">32</span>  <span class="number">4432.0</span>                 <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li><p>df.index.name = “index_name”</p>
<ul>
<li>修改index为新index<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    ```</span><br><span class="line"><span class="number">4.</span> df.columns = <span class="built_in">map</span>(<span class="built_in">str</span>.lower, df.columns)</span><br><span class="line">    * 所有列名变大写字母</span><br><span class="line">    ```python</span><br><span class="line">    df.columns = <span class="built_in">map</span>(<span class="built_in">str</span>.lower, df.columns)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>map()–python的内置函数,接受一个function,数个待迭代的list,使用function对list进行处理得到新的list,并不改变原list</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="Drop-Data"><a href="#Drop-Data" class="headerlink" title="Drop Data"></a>Drop Data</h3><ol>
<li>df.drop(columns=[‘columnName’])<ul>
<li>指定删除某列数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar = df.drop(columns=[<span class="string">&#x27;Id&#x27;</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>mySeries.drop([‘a’])<ul>
<li>指定删除索引值指向的value</li>
</ul>
</li>
<li>f.drop(‘Volume’, axis=1)<ul>
<li>删除一个变量\一个量<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar =  df.drop(<span class="string">&#x27;Id&#x27;</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="转换数据类型"><a href="#转换数据类型" class="headerlink" title="转换数据类型"></a>转换数据类型</h3></li>
</ul>
</li>
<li>df.dtypes<br> dataframe内各列的数据类型</li>
<li>df[‘columnName’] = df[‘columnName’].astype(‘dataType’)<ul>
<li>转换指定行的数据类型<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Id&#x27;</span>] = df[<span class="string">&#x27;Id&#x27;</span>].astype(<span class="string">&#x27;float&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h3></li>
</ul>
</li>
<li>方法1–自定义def函数 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">examples</span>(<span class="params">x</span>):</span>   <span class="comment">#create a function</span></span><br><span class="line"><span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">df.Open.apply(examples).head()  <span class="comment">#use the function with apply()  </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>自定义函数后,df.ColumnName获取df中需要使用此函数的列,再对此列使用apply函数,传入需要使用的函数</p>
</blockquote>
</li>
<li>lambda函数 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.Open.apply(<span class="keyword">lambda</span> x: x*<span class="number">2</span>).head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>df.ColumnName获取df中需要使用此函数的列,再对此列使用lambda 声明数据处理方法</p>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
</search>
