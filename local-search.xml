<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git-01-基本命令</title>
    <link href="/2021/07/12/git/git-01-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/12/git/git-01-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><code>windows</code>系统进入<code>git bash</code> 后有大量的命令来解放鼠标操作</p><p>以下将介绍部分常用命令</p><span id="more"></span><h3 id="我们在随意位置打开-git-bash"><a href="#我们在随意位置打开-git-bash" class="headerlink" title="我们在随意位置打开 git bash"></a>我们在随意位置打开 <code><font color='dodgerblue'>git bash</font></code></h3><hr><h3 id="pwd–查看当前位置"><a href="#pwd–查看当前位置" class="headerlink" title="pwd–查看当前位置"></a><code><font color='dodgerblue'>pwd</font></code>–查看当前位置</h3><p>使用 <code><font color='OrangeRed'>pwd</font></code> 查看当前窗口处在位置 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ <span class="hljs-built_in">pwd</span><br>/a/testfolder<br></code></pre></td></tr></table></figure><p><code><font color='deeppink'>git</font></code> 显示我当前的位置为 <code><font color='deeppink'>`/a/testfolder</font></code>  即表明我当前处于 <code><font color='deeppink'>a</font></code> 盘内 <code><font color='deeppink'>testfolder</font></code> 文件夹内</p><p>我们也可以直观通过<code>26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder</code>最后的文件夹位置查看</p><ul><li>以下示例, 我们皆通过此行信息判定当前位置, 不再刻意使用<code>pwd</code></li></ul><hr><h3 id="ls–查看文件-夹"><a href="#ls–查看文件-夹" class="headerlink" title="ls–查看文件(夹)"></a><code><font color='dodgerblue'>ls</font></code>–查看文件(夹)</h3><p>使用 <code><font color='OrangeRed'>ls</font></code> 查看当前位置所有的文件(夹) :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ ls<br>folder1/  folder2/  git-分支合并.md  git-工作流程.md  git-文件操作.md<br></code></pre></td></tr></table></figure><p>可见当前 <code><font color='deeppink'>/a/testfolder</font></code> 文件夹内有两个文件夹 <code><font color='deeppink'>folder1/</font></code> 与 <code><font color='deeppink'>folder2</font></code> , 以及三个文件 <code><font color='deeppink'>git-分支合并.md</font></code> 等</p><hr><h3 id="cd–进入文件夹"><a href="#cd–进入文件夹" class="headerlink" title="cd–进入文件夹"></a><code><font color='dodgerblue'>cd</font></code>–进入文件夹</h3><h4 id="单次进入"><a href="#单次进入" class="headerlink" title="单次进入"></a>单次进入</h4><p>使用 <code><font color='OrangeRed'>cd &lt;foldernam&gt;</font></code> 进入目标文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ <span class="hljs-built_in">cd</span> folder1<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder1<br>$<br></code></pre></td></tr></table></figure><p>一般为确认当前位置存在哪些文件夹, 我们先使用 <code><font color='orangered'>ls</font></code> 查看当前位置存在的文件夹</p><p class="note note-info">在git bash内的复制粘贴为 <code><font color='mediumspringgreen'>crtl + insert</font></code> 与 <code><font color='mediumspringgreen'>shift + insert</font></code> </p><p>在 <code><font color='orangered'>ls</font></code> 结果中复制粘贴想使用的路径, 再进行后续操作</p><h4 id="多次进入"><a href="#多次进入" class="headerlink" title="多次进入"></a>多次进入</h4><p>我们也可以直接在 <code><font color='OrangeRed'>cd</font></code> 后使用我们想要去的最终路径</p><p>我们随意复制一个其他位置的路径, 如 : <code><font color='deeppink'>/e/pics/beatles</font></code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder1<br>$ cd /e/pics/beatles<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /e/pics/beatles<br>$<br></code></pre></td></tr></table></figure><p>可以发现 <code><font color='OrangeRed'>cd</font></code> 命令可以直接定位到目标路径, 不论该路径是否与我们当前位置有从属关系</p><h3 id="cd-退出文件夹"><a href="#cd-退出文件夹" class="headerlink" title="cd ../退出文件夹"></a><code><font color='dodgerblue'>cd ../</font></code>退出文件夹</h3><h4 id="使用cd-退出当前文件夹-返回上一级"><a href="#使用cd-退出当前文件夹-返回上一级" class="headerlink" title="使用cd ../退出当前文件夹, 返回上一级"></a>使用<code><font color='dodgerblue'>cd ../</font></code>退出当前文件夹, 返回上一级</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder1<br>$ cd ../<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$<br></code></pre></td></tr></table></figure><p>如上代码, 我们使用<code>cd ../</code> 从 <code>/a/testfolder/folder1</code> 回退到了 <code>/a/testfolder</code></p><h4 id="组合使用cd-回退多重文件夹"><a href="#组合使用cd-回退多重文件夹" class="headerlink" title="组合使用cd ../回退多重文件夹"></a>组合使用<code><font color='dodgerblue'>cd ../</font></code>回退多重文件夹</h4><p>为方便演示, 我们再次进入 <code><font color='deeppink'>/a/testfolder/folder1</font></code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ cd folder1<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder1<br>$<br></code></pre></td></tr></table></figure><ul><li>对于前面使用过的代码, 比如此处的 <code><font color='OrangeRed'>`cd folder1</font></code> , 我们可以使用键盘 <code><font color='deeppink'>↑ ↓</font></code>  来浏览我们使用过的命令, 再回车进行使用</li><li>对于不小心输入错误的命令, 我们可以使用 <code><font color='deeppink'>crtl + c</font></code> 来撤销此次命令, 开始下一次的命令输入  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ cd folder1\<br>&gt; ^C<br></code></pre></td></tr></table></figure>  如上, 在输入 <code><font color='deeppink'>folder1</font></code> 后不小心输入<code>\</code> 并按下了回车, 此时我们使用 <code><font color='deeppink'>crtl + c</font></code> 便失效了此次命令输入, 直接进行下次输入</li></ul><p>接下来我们正式使用多个 <code><font color='OrangeRed'>../</font></code> 组合完成多级文件夹的回退</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder1<br>$ cd ../../../../<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /<br>$ pwd<br>/<br></code></pre></td></tr></table></figure><p>如上, 我们使用四个 <code><font color='OrangeRed'>../</font></code> 组合完成了四次的回退, 最终回到了不属于任何特定盘的位置</p><p>此时使用 <code><font color='OrangeRed'>pwd</font></code> , <code><font color='OrangeRed'>git</font></code> 告诉我们此时处于 <code><font color='deeppink'>/</font></code> 这么一个位置, 我们可以把这个位置想象成所有文件的终根目录,从这里我们可以直接进入任何盘</p><h4 id="mkdir创建文件夹"><a href="#mkdir创建文件夹" class="headerlink" title="mkdir创建文件夹"></a><code><font color='dodgerblue'>mkdir</font></code>创建文件夹</h4><p>为了方便演示, 我们回到 <code><font color='deeppink'>/a/testfolder</font></code> 文件夹下</p><p>查看当前位置的文件(夹) :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ ls<br>folder1/  folder2/  git-分支合并.md  git-工作流程.md  git-文件操作.md<br></code></pre></td></tr></table></figure><p>我们想要创建一个 <code><font color='deeppink'>folder3</font></code> , 则使用 <code><font color='OrangeRed'>mkdir &lt;foldername&gt;</font></code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ mkdir folder3<br></code></pre></td></tr></table></figure><p>查看当前文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ ls<br>folder1/  folder2/  folder3/  git-分支合并.md  git-工作流程.md  git-文件操作.md<br></code></pre></td></tr></table></figure><p>可见 <code><font color='deeppink'>folder3</font></code> 被成功创建</p><h4 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a><code><font color='dodgerblue'>touch</font></code>创建文件</h4><p>我们 <code><font color='OrangeRed'>cd folder3</font></code> 进入刚才创建的 <code><font color='deeppink'>folder3</font></code> , 并查看当前文件夹内有哪些文件(夹) : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder<br>$ cd folder3<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder3<br>$ ls<br><br></code></pre></td></tr></table></figure><p>可见当前文件夹内无任何文件(夹)</p><p>我们使用 <code><font color='OrangeRed'>touch &lt;filename&gt;</font></code> 创建一个文件 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder3<br>$ touch test.txt<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder3<br>$ ls<br>test.txt<br></code></pre></td></tr></table></figure><p>可见 <code><font color='deeppink'>test.txt</font></code> 被成功创建</p><h4 id="vim编辑器对文件进行简单编辑"><a href="#vim编辑器对文件进行简单编辑" class="headerlink" title="vim编辑器对文件进行简单编辑"></a><code><font color='dodgerblue'>vim</font></code>编辑器对文件进行简单编辑</h4><p>我们可以使用 <code><font color='OrangeRed'>vim</font></code> 编辑器, 对刚才建立的 <code><font color='deeppink'>test.txt</font></code> 文件进行简单编辑 :</p><p>使用 <code><font color='OrangeRed'>vim &lt;filename&gt;</font></code> 命令来使用 <code><font color='OrangeRed'>vim</font></code> 打开目标文件 : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder3<br>$ vim test.txt<br></code></pre></td></tr></table></figure><p>回车后, 出现如下内容 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs git"><br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>test.txt [unix] (20:46 12/07/2021)                                     0,0-1 All<br>&quot;test.txt&quot; 0L, 0B<br></code></pre></td></tr></table></figure><ul><li>每行前的 <code><font color='deeppink'>~</font></code> 表明这是独立一行, 第一行无此符号</li><li>倒数第二行显示了一些此文件的基本信息, 如创建时间</li><li>尾行显示了此文件名 行数 大小</li></ul><p>我们按下键盘 <code><font color='deeppink'>insert</font></code> 键进入 <code><font color='deeppink'>insert</font></code> 模式(即编辑模式), 此时最后一行变为 :<br><code>-- INSERT -- </code></p><ul><li>也只有在 <code><font color='deeppink'>insert</font></code> 模式下我们才能做出修改</li></ul><p>我们可以在光标闪烁处键入内容 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">this is a test line<br></code></pre></td></tr></table></figure><p><code><font color='OrangeRed'>vim</font></code> 的退出 :</p><ul><li>输入完毕后, 我们按下(或按住) <code><font color='deeppink'>esc</font></code> 键, 此时屏幕进入闪烁状态, 且尾行的 <code><font color='deeppink'>insert</font></code> 消失, 表明我们退出了编辑模式</li><li>此时我们输入一个 <code><font color='deeppink'>:</font></code> , 即同时按下 <code><font color='deeppink'>shift + ;</font></code> 键, 此时可以观察到尾行出现了我们刚才输入的  <code><font color='deeppink'>:</font></code> , 且窗口停止闪烁  (此时若你是一直按着 <code><font color='deeppink'>esc</font></code> , 那么我们可以松开 <code><font color='deeppink'>esc</font></code> 键了)</li><li>输入 <code><font color='deeppink'>wq</font></code> , 尾行变成了 <code><font color='deeppink'>:wq</font></code> </li><li>最后按下回车键, 完成对文件的保存退出</li></ul><p>我们完成测试编辑后, 使用 <code><font color='OrangeRed'>vim</font></code> 或者记事本等编辑器打开该文件, 可见刚才的修改生效 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs git">this is a test line<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>~<br>test.txt [unix] (20:58 12/07/2021)                                      1,18 All<br>&quot;test.txt&quot; [unix] 1L, 21B<br></code></pre></td></tr></table></figure><p><code><font color='OrangeRed'>vim</font></code> 尾行显示了修改后的文件大小</p><h4 id="rm删除文件"><a href="#rm删除文件" class="headerlink" title="rm删除文件"></a><code><font color='dodgerblue'>rm</font></code>删除文件</h4><p>使用 <code><font color='OrangeRed'>vim &lt;filename&gt;</font></code> 删除文件 : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder3<br>$ rm test.txt<br><br>26676@DESKTOP-KEJKGL7 MINGW64 /a/testfolder/folder3<br>$ ls<br><br></code></pre></td></tr></table></figure><p>可见 <code><font color='deeppink'>test.txt</font></code> 被成功删除</p><h5 id="此外还有很多与具体事务相关的命令-我们后续详细介绍"><a href="#此外还有很多与具体事务相关的命令-我们后续详细介绍" class="headerlink" title="此外还有很多与具体事务相关的命令, 我们后续详细介绍"></a>此外还有很多与具体事务相关的命令, 我们后续详细介绍</h5>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>常用命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git--初始化本地仓库</title>
    <link href="/2021/07/11/git/git-02-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
    <url>/2021/07/11/git/git-02-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>创建一个本地文件夹用以初始化本地仓库， 进行本地数据的管理</p><span id="more"></span><p>在<code>c</code>盘创建一个<code>Git</code>文件夹,但此文件夹不是必要的<br>在<code>Git</code>文件夹内创建一个用于学习git的文件夹<code>gitlearn</code> </p><h1 id="0"><code><font color='dodgerblue'>git init-初始化仓库</font></code></h1><p>使用命令<code>git init</code>初始化仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git init<br></code></pre></td></tr></table></figure><p>随后便可以看见初始化成功的确认信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git init<br>Initialized empty Git repository in A:/Git/gitlearn/.git/<br></code></pre></td></tr></table></figure><h5 id="创建好第一个仓库后-我们简单进行一些本地的数据管理演示"><a href="#创建好第一个仓库后-我们简单进行一些本地的数据管理演示" class="headerlink" title="创建好第一个仓库后, 我们简单进行一些本地的数据管理演示"></a>创建好第一个仓库后, 我们简单进行一些本地的数据管理演示</h5><hr><h1 id="git-status-工作区状态"><a href="#git-status-工作区状态" class="headerlink" title="git status - 工作区状态"></a><h1 id="1"><code><font color='dodgerblue'>git status - 工作区状态</font></code></h1></h1><h2 id="status-工作区状态"><a href="#status-工作区状态" class="headerlink" title="status - 工作区状态"></a><code>status - 工作区状态</code></h2><p>我们在本地对文件进行修改后, <code>git</code>会检测到这些修改, 并提供相应的后续处理建议</p><p>以上操作记录即操作建议, 构成了工作区状态–<code>status</code></p><h2 id="git-status-查看状态"><a href="#git-status-查看状态" class="headerlink" title="git status - 查看状态"></a><code>git status - 查看状态</code></h2><p>使用 <code><font color='dodgerblue'>git status</font></code> 查看当前仓库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>On branch master<br><br>No commits yet<br><br>nothing to commit (create/copy files and use &quot;git add&quot; to track)<br></code></pre></td></tr></table></figure><p>可见此时仓库是空的,当前<code>branch</code>为<code>master</code>, 没有任何<code>commit</code></p><h2 id="status-更新"><a href="#status-更新" class="headerlink" title="status - 更新"></a><code>status - 更新</code></h2><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a><code>新建文件</code></h3><p>我们尝试向仓库添加一个文本文件<code>text.txt</code> ：</p><ul><li>使用 <code>touch filename</code>创建一个文件</li><li>使用 <code>ls</code>查看当前路径下的所有文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">26676@DESKTOP-JCSGJPO MINGW64 /a/Git/gitlearn (master)<br>$ touch test.txt<br><br>26676@DESKTOP-JCSGJPO MINGW64 /a/Git/gitlearn (master)<br>$ ls<br>test.txt  <br></code></pre></td></tr></table></figure></li></ul><p class="note note-info">此处, 我们也可在文件夹内"新建文件夹"</p><h3 id="查看新日志"><a href="#查看新日志" class="headerlink" title="查看新日志"></a><code>查看新日志</code></h3><p>我们再次使用<code>git status</code>查看信息,可得 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>On branch master<br><br>No commits yet<br><br>Untracked files:<br>  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)<br>        text1.txt<br><br>nothing added to commit but untracked files present (use &quot;git add&quot; to track)<br><br></code></pre></td></tr></table></figure><ul><li>显示我们新建了一个<code>text1.txt</code>文件,但是该文件未在<code>git</code>的追踪目录内</li><li>如果我们不添加和提交此文件,<code>git</code>便不会跟踪此文件</li></ul><hr><h1 id="git-add-提交暂存区"><a href="#git-add-提交暂存区" class="headerlink" title="git add - 提交暂存区"></a><h1 id="2"><code><font color='dodgerblue'>git add - 提交暂存区</font></code></h1></h1><p>对于我们新建的文件<code>test.txt</code>, 我们想让<code>git</code>追踪其版本更迭, 此时我们应如上面<code>git</code>建议所 ：使用<code>git add</code>命令将其提交到暂存区</p><h4 id="git-add-提交暂存区-1"><a href="#git-add-提交暂存区-1" class="headerlink" title="git add - 提交暂存区"></a><code>git add - 提交暂存区</code></h4><p>使用<code>git add &lt;name&gt;</code>命令将该文件添加到<code>staging</code>区域(即暂存区) ， 可得 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git add text1.txt<br>warning: LF will be replaced by CRLF in text1.txt.<br>The file will have its original line endings in your working directory<br></code></pre></td></tr></table></figure><p>报错提示:<code>The file will have its original line endings in your working directory</code></p><ul><li>是因为<code>git</code>默认将文本中的回车换行统一为<code>CRLF</code>,不影响文本的实际使用</li></ul><h4 id="git-status-查看状态-1"><a href="#git-status-查看状态-1" class="headerlink" title="git status - 查看状态"></a><code>git status - 查看状态</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>On branch master<br><br>No commits yet<br><br>Changes to be committed:<br>  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)<br>        new file:   text1.txt<br></code></pre></td></tr></table></figure><p>此时的提示信息更新为 ：<code>git rm --cached &lt;file&gt;...</code> ，提示我们使用<code>rm</code>来将文件从暂存区撤回<br><a href="#1">git status - 工作区状态</a></p><h1 id="2"><code><font color='dodgerblue'>git commit - 提交版本库</font></code></h1><p>使用<code>git commit -m &quot;info&quot;</code>将暂存区的文件提交到仓库中 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git commit -m &quot;the first commit. add text1.txt to the repository&quot;<br>[master (root-commit) 21dced3] the first commit. add text1.txt to the repository<br> 1 file changed, 1 insertion(+)<br> create mode 100644 text1.txt<br></code></pre></td></tr></table></figure><p><code>-m</code>后的信息为此次<code>commit</code>的信息</p><p>此时再次检查工作区的状态,可以看见干净的工作树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>On branch master<br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure><hr><h1 id="4"><code><font color='dodgerblue'>git log - 日志信息</font></code></h1><p>使用<code>git log</code>获得历史提交记录 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git log<br>commit 21dced3ee6053a17e148ef75cd2d35863155f4a9 (HEAD -&gt; master)<br>Author: MarkLilyC &lt;2667602812@qq.com&gt;<br>Date:   Sun Jul 11 16:50:18 2021 +0800<br><br>    the first commit. add text1.txt to the repository<br></code></pre></td></tr></table></figure><p>可见我们设置的提交信息被打印了出来</p><h3 id="简化日志信息"><a href="#简化日志信息" class="headerlink" title="简化日志信息"></a>简化日志信息</h3><p>使用命令<code>git log  --pretty=onelin --abbrev-commit</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git log --pretty=oneline --abbrev-commit<br>8244163 (HEAD -&gt; master, tag: v2.0) commit to test recall from commit<br>abfb3b5 commit this testfile to comiit hist<br>3699296 aa<br>1dd8abb aa<br>543a126 aa<br>7abf4b6 add a new line by vim<br>00e7919 add a test.txt to repo<br>40442a5 AA<br>85f2fbb ADD T2.TXT<br>bd8bfc5 add a line id = 3<br>d5fe445 add a line id = 2<br>fb84050 add a line id = 1<br>2e7ebbb add t.txt to the repo<br>440e71c remove a file<br>1e71bf1 rename<br>8377709 rename<br>8b0aa8b aa<br>199f71f (tag: v1.0) AA<br>0bbb931 aa<br>d219e28 aa<br>08926e9 aa<br>a638d98 aa<br>9ee99cc aa<br><br></code></pre></td></tr></table></figure><p>按下<code>q</code>退出</p><h4 id="以上便是使用git-init进行初始化的步骤-以及一些简单的命令操作"><a href="#以上便是使用git-init进行初始化的步骤-以及一些简单的命令操作" class="headerlink" title="以上便是使用git init进行初始化的步骤, 以及一些简单的命令操作"></a>以上便是使用<code>git init</code>进行初始化的步骤, 以及一些简单的命令操作</h4>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--函数</title>
    <link href="/2021/07/10/Python/basic/%E5%87%BD%E6%95%B0/"/>
    <url>/2021/07/10/Python/basic/%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><p>–</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><hr><h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><span id="more"></span><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><ul><li>定义函数时设置默认值,则调用函数时不需要指定参数值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a = <span class="hljs-number">1</span>, b = <span class="hljs-number">4</span></span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> a * b<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func())<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure></li><li>定义函数时设置默认值,调用函数指定他值,则他值覆盖默认值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a = <span class="hljs-number">1</span>, b = <span class="hljs-number">4</span></span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> a * b<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func())<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="关键字参数-参数关键字"><a href="#关键字参数-参数关键字" class="headerlink" title="关键字参数(参数关键字)"></a>关键字参数(参数关键字)</h4></li><li>调用函数传入参数时,若不指定各传入值对应参数名,则传入值会按照默认顺序(函数定义式中的参数顺序)进行参数赋值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span>(<span class="hljs-params">a, b, c, d</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span>(a * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + d)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func2(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure></li><li>调用函数传入参数时,指定参数关键字则不用在意参数传入顺序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span>(<span class="hljs-params">a, b, c, d</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span>(a * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + d)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func2(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-number">1234</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func2(d=<span class="hljs-number">4</span>, a=<span class="hljs-number">1</span>, c=<span class="hljs-number">3</span>, b=<span class="hljs-number">2</span>))<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><h4 id="任意参数"><a href="#任意参数" class="headerlink" title="任意参数"></a>任意参数</h4><code>1.</code> 在任意参数前添加<code>*</code>标定此参数为任意参数</li><li>它将非关键字的参数作为元组传入函数内部<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span>(<span class="hljs-params">a, b, c, d</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span>(a * <span class="hljs-number">1000</span> + b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + d)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func2(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-number">1234</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(func2(d=<span class="hljs-number">4</span>, a=<span class="hljs-number">1</span>, c=<span class="hljs-number">3</span>, b=<span class="hljs-number">2</span>))<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><code>2.</code> <code>**kwargs</code> 用以传递任意关键字参数<code>(kew = ars)</code></li><li>将带传入参数及其关键字以<code>&#39;&#39;键值对&#39;&#39;</code>形式传入</li><li>传入参数及其关键字被转换为<code>dict</code>传入函数内部,通过关键字定位参数值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func4</span>(<span class="hljs-params">**kwargs</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(kwargs.__class__)<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> kwargs:<br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this is &#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27; and its arg = &#x27;</span> +<span class="hljs-built_in">str</span>(kwargs[i]))<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>func4(name = <span class="hljs-string">&#x27;markilily&#x27;</span>,age = <span class="hljs-number">120</span>)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">this</span> <span class="hljs-title">is</span> <span class="hljs-title">name</span> <span class="hljs-title">and</span> <span class="hljs-title">its</span> <span class="hljs-title">arg</span> = <span class="hljs-title">markilily</span></span><br><span class="hljs-class"><span class="hljs-title">this</span> <span class="hljs-title">is</span> <span class="hljs-title">age</span> <span class="hljs-title">and</span> <span class="hljs-title">its</span> <span class="hljs-title">arg</span> = 120</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--元组</title>
    <link href="/2021/07/07/Python/basic/%E5%85%83%E7%BB%84/"/>
    <url>/2021/07/07/Python/basic/%E5%85%83%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="列表与元组"><a href="#列表与元组" class="headerlink" title="列表与元组"></a>列表与元组</h1><ul><li>当元素类型不一时使用元组,当类型一样则使用列表 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="参考资料1">[1]</span></a></sup></li><li>元组遍历更快</li><li>使用元组元素(不可变)可作为字典的键值,而列表不可</li><li>元组保证了数据的安全</li></ul><span id="more"></span><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1 列表"></a>1 列表</h2><p>略</p><h2 id="2-元组-tuple"><a href="#2-元组-tuple" class="headerlink" title="2 元组-tuple"></a>2 元组-<code>tuple</code></h2><p>元组类似于列表,但区别在于元组中的元素是不可变的</p><h3 id="2-1-创建一个元组"><a href="#2-1-创建一个元组" class="headerlink" title="2.1 创建一个元组"></a>2.1 创建一个元组</h3><p><code>1.</code> 使用<code>()</code>创建一个元组,使用<code>,</code>间隔元素<br><code>2.</code> 类似于列表,元组中的元素可以是任何数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tuple1, tuple1.__class__)<br>(<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>因为元组不能改变,所以创建伊始就应该指定正确的元素</p></blockquote><p><code>3.</code> 创建元组时只指明一个元素<code>(dtype A)</code>,则该元组(你意图创建的)会被视为<code>A</code>的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># case1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = (<span class="hljs-string">&#x27;aa&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.__class__)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">str</span>&#x27;&gt;</span><br><span class="hljs-class"># <span class="hljs-title">case2</span></span><br><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">b</span> = (<span class="hljs-params">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span>)</span><br><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">b.__class__</span>)</span><br><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br><span class="hljs-class"># <span class="hljs-title">case3</span></span><br><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">c</span> = (<span class="hljs-params"><span class="hljs-number">1</span></span>)</span><br><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">c.__class__</span>)</span><br><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">int</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><code>case1-3</code>中意图创建元组<code>a b c</code>,但创建时指指定了一个内部元素<code>param(dtype A)</code>,因此该元组被视为<code>A</code>类的一个对象</p><h3 id="2-2-访问元组元素"><a href="#2-2-访问元组元素" class="headerlink" title="2.2 访问元组元素"></a>2.2 访问元组元素</h3><h4 id="2-2-1-索引-index"><a href="#2-2-1-索引-index" class="headerlink" title="2.2.1 索引-index"></a>2.2.1 索引-index</h4><p><code>[index:int]</code>使用索引操作符来访问元组中的元素<br><code>1.</code> 正索引 : <code>0-len(tuple)-1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tuple1[<span class="hljs-number">2</span>])<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p><code>2.</code> 负索引</p><h4 id="2-2-2-切片"><a href="#2-2-2-切片" class="headerlink" title="2.2.2 切片"></a>2.2.2 切片</h4><p><code>:</code>使用切片操作符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tuple1[<span class="hljs-number">1</span>:])<br>(<span class="hljs-number">1</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><code>1.</code> <code>enumerate()</code>: 将元组内所有对象及其索引枚举,以元组的形式返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">enumerate</span>(tuple1).__class__)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">enumerate</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><code>2.</code> <code>tuple()</code>: 将序列（元组，字符串，字典）转换为元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;aa&#x27;</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span>tp1 = <span class="hljs-built_in">tuple</span>(list1)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(list1.__class__, tp1.__class__)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt; &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">tuple</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><code>3.</code> <code>sorted</code>: 返回一个排序元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>tuplle1 = (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(tuplle1))<br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--命名空间</title>
    <link href="/2021/07/07/Python/basic/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <url>/2021/07/07/Python/basic/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="命名空间及作用域"><a href="#命名空间及作用域" class="headerlink" title="命名空间及作用域"></a>命名空间及作用域</h1><h2 id="1-命名空间"><a href="#1-命名空间" class="headerlink" title="1.命名空间"></a>1.命名空间</h2><h3 id="1-1-命名空间（Namespace）"><a href="#1-1-命名空间（Namespace）" class="headerlink" title="1.1 命名空间（Namespace）"></a>1.1 命名空间（Namespace）</h3><p><code>1.</code> 是从名称到对象的映射，一般通过字典实现<br><code>2.</code> 类似于<code>c++</code></p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std<br></code></pre></td></tr></table></figure><h3 id="1-2-命名空间主要为了避免对象名称冲突"><a href="#1-2-命名空间主要为了避免对象名称冲突" class="headerlink" title="1.2 命名空间主要为了避免对象名称冲突"></a>1.2 命名空间主要为了避免对象名称冲突</h3><p><code>1. </code> 各个命名空间之间相互独立<br><code>2. </code> 命名空间内部不能有同名称对象<br><code>3. </code> 各个命名空间之间可以有相同名称对象</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 如计算机内部文件夹之间的关系：</span><br><span class="hljs-bullet">    *</span> 单个文件夹内部不能有同名称元素<br><span class="hljs-bullet">    *</span> 不同文件夹之间可以同名称元素<br></code></pre></td></tr></table></figure><h3 id="1-3-python一般有三种命名空间：内置-built-in-局部-本地-local-全局-global"><a href="#1-3-python一般有三种命名空间：内置-built-in-局部-本地-local-全局-global" class="headerlink" title="1.3 python一般有三种命名空间：内置-built in 局部(本地)-local 全局-global"></a>1.3 python一般有三种命名空间：<code>内置-built in</code> <code>局部(本地)-local</code> <code>全局-global</code></h3><h4 id="1-3-1-局部"><a href="#1-3-1-局部" class="headerlink" title="1.3.1 局部"></a>1.3.1 局部</h4><p><code>1.</code> 局部空间包含:函数中定义的名称,记录了函数的变量,包括函数的参数与局部变量</p><ul><li>此局部指的是此作用域,及其内部包含的对象 名称</li></ul><p><code>2.</code> <code>locals()</code>:返回当前位置的全部局部变量</p><ul><li>当前位置指的是当前<code>locals()</code>函数被调用的位置</li><li>全局内使用<code>locals()</code>:所有有实例的函数 方法 lambda函式以及实现了__call__的,都会返回true<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>&#123;<span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>: &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="hljs-title">__spec__</span>&#x27;:</span> <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="hljs-string">&#x27;builtins&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;, <span class="hljs-string">&#x27;len&#x27;</span>: &lt;function <span class="hljs-built_in">len</span> at <span class="hljs-number">0x00000186888145E8</span>&gt;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此时的局部空间等于全局空间</p></blockquote></li><li>函数内部使用<code>locals()</code>:返回此函数空间内的所有名称及对象<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">len</span>(<span class="hljs-params">param</span>):</span><br><span class="hljs-meta">... </span>    in_param = <span class="hljs-number">2</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(<span class="hljs-number">4</span>)<br>&#123;<span class="hljs-string">&#x27;param&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;in_param&#x27;</span>: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure></li><li>循环内使用<code>locals()</code>:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br>...<br>&#123;<span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>: &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="hljs-title">__spec__</span>&#x27;:</span> <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="hljs-string">&#x27;builtins&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;, <span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-number">1</span>&#125;<br>&#123;<span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>: &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="hljs-title">__spec__</span>&#x27;:</span> <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="hljs-string">&#x27;builtins&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;, <span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>证明for循环不算一个单独的作用域</p></blockquote></li></ul><h4 id="1-3-2-全局"><a href="#1-3-2-全局" class="headerlink" title="1.3.2 全局"></a>1.3.2 全局</h4><p><code>1.</code> 全局空间包含:模块中定义的名称,记录了模块的变量,包括函数 类 导入模块</p><ul><li>可理解为此<code>.py</code>文件所代表的空间</li></ul><p><code>2.</code> <code>globals()</code>:返回当前全局空间内的名称及对象</p><ul><li>全局内使用<code>globals()</code>:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())<br>&#123;<span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>: &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">_frozen_importlib</span>.<span class="hljs-title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="hljs-title">__spec__</span>&#x27;:</span> <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="hljs-string">&#x27;builtins&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;, <span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure></li><li>全局命名空间里包括了整个模块内的命名名称，比如变量 x y 函数名,而且还包括了一些内置的变量命名，比如 <code>__name__</code> <code>__file__</code>等等。</li><li>全局空间与全局使用局部空间相同:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-built_in">locals</span>() == <span class="hljs-built_in">globals</span>():<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;yes&#x27;</span>)<br><span class="hljs-meta">... </span><span class="hljs-keyword">else</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no&#x27;</span>)<br>...<br>yes<br></code></pre></td></tr></table></figure><h4 id="1-3-3-内置"><a href="#1-3-3-内置" class="headerlink" title="1.3.3 内置"></a>1.3.3 内置</h4><code>1.</code> 内置空间包含:python语言的内置名称,如函数名abs char等<h3 id="1-4-各空间关系"><a href="#1-4-各空间关系" class="headerlink" title="1.4 各空间关系"></a>1.4 各空间关系</h3><code>1. </code>命名空间使用顺序:局部-&gt;全局-&gt;内置</li><li>这样可以完成对<code>全局</code> <code>内置</code>函数的’’改写’’:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">len</span>(<span class="hljs-params">param</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(param)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure>python内置此方法的输出为元素长度:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]))<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure></li><li>当无法找到此名称的对象时,则抛出异常<h3 id="命名空间的生命周期"><a href="#命名空间的生命周期" class="headerlink" title="命名空间的生命周期"></a>命名空间的生命周期</h3>命名空间的声明周期却决与该变量的作用域,对象执行完成,则该命名空间的生命周期结束<h2 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2. 作用域"></a>2. 作用域</h2><h3 id="2-1-作用域"><a href="#2-1-作用域" class="headerlink" title="2.1 作用域"></a>2.1 作用域</h3><code>1.</code> 作用域:访问某变量 对象的区域</li><li>每个对象都存在特定的作用域中 作用时段中</li><li>当前程序未执行到该作用域,则某些只存在于该作用域的对象则不能被访问</li><li>或者说,只有被赋值且未该赋值区域未完成其全部功能时,该对象才能被访问<blockquote><p>简单来说就是:该对象在未赋值时,不能被访问;使用结束跳出该域后也不能访问</p></blockquote><h3 id="2-2-作用域分类"><a href="#2-2-作用域分类" class="headerlink" title="2.2 作用域分类"></a>2.2 作用域分类</h3><h4 id="2-2-1-L-local-局部作用域"><a href="#2-2-1-L-local-局部作用域" class="headerlink" title="2.2.1 L-local 局部作用域"></a>2.2.1 <code>L-local</code> 局部作用域</h4><h4 id="2-2-2-E-encloing-scope-闭包函数作用域-嵌套函数-A-B-var-c-中var-c所在作用域"><a href="#2-2-2-E-encloing-scope-闭包函数作用域-嵌套函数-A-B-var-c-中var-c所在作用域" class="headerlink" title="2.2.2  E-encloing scope 闭包函数作用域,嵌套函数(A(B(var c)))中var c所在作用域"></a>2.2.2  <code>E-encloing scope</code> 闭包函数作用域,嵌套函数<code>(A(B(var c)))</code>中<code>var c</code>所在作用域</h4><h4 id="2-2-3-G-global"><a href="#2-2-3-G-global" class="headerlink" title="2.2.3  G=global"></a>2.2.3  <code>G=global</code></h4><h4 id="2-2-4-B-built-in"><a href="#2-2-4-B-built-in" class="headerlink" title="2.2.4  B-built in"></a>2.2.4  <code>B-built in</code></h4><code>1.</code> 内置作用域的实现是通过<code>builtin</code>标准模块实现  <blockquote><p>但是此变量名本身并未放入内置作用域,需要导入模块才能使用<br><code>2.</code> <code>builtin</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> builtins<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dir</span>(builtins)<br></code></pre></td></tr></table></figure><h3 id="2-3-规则"><a href="#2-3-规则" class="headerlink" title="2.3 规则"></a>2.3 规则</h3><code>1.</code> 当在函数中引用一个变量的时候，以上的作用域顺序也是 Python 搜索的一个顺序 <code>L-&gt;E-G-B</code>，首先尝试局部作用域，没找到的话，继续搜索闭包函数作用域，然后再是全局作用域和内置作用域。<br><code>2.</code> Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域</li><li>其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问(如<code>1.3.1.2</code>) 如:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br><span class="hljs-meta">... </span>    testStr = <span class="hljs-string">&#x27;this is a testline to test if this is a new region&#x27;</span><br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(testStr)<br>this <span class="hljs-keyword">is</span> a testline to test <span class="hljs-keyword">if</span> this <span class="hljs-keyword">is</span> a new region<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--集合</title>
    <link href="/2021/07/07/Python/basic/%E9%9B%86%E5%90%88/"/>
    <url>/2021/07/07/Python/basic/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="集合-set"><a href="#集合-set" class="headerlink" title="集合-set"></a>集合-set</h1><p>集合的基本性质:<br><code>1.</code> 集合包含了不重复且无序的元素<br><code>2.</code> 集合是可变数据类型  </p><span id="more"></span><ul><li>但是其内部元素必须是不可变数据类型,即元组可以作为其元素,但是列表 集合 字典不能作为其元素  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>c = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]&#125;<br>Traceback (most recent call last):<br>File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: unhashable <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;list&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1. 创建集合"></a>1. 创建集合</h2></li><li>使用<code>&#123;&#125;</code>创建集合,内部元素使用<code>,</code>分隔</li><li>使用python内置函数<code>set()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,tuplle1&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;SS&#x27;</span>,tuplle1])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.__class__, b.__class__)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">set</span>&#x27;&gt; &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">set</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-修改集合"><a href="#2-修改集合" class="headerlink" title="2. 修改集合"></a>2. 修改集合</h2></li><li>不能通过索引 切片操作来访问其中的元素,因为集合是无序的<h3 id="2-1-添加元素"><a href="#2-1-添加元素" class="headerlink" title="2.1 添加元素"></a>2.1 添加元素</h3><code>1.</code> <code>add()</code>方法添加单个元素<br><code>2.</code> <code>update()</code>方法添加多个元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,tuplle1&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.add(<span class="hljs-string">&#x27;aa&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.update([<span class="hljs-number">2</span>,<span class="hljs-number">4</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>集合内不重复的性质会自动去掉update()参数中的重复元素</p></blockquote><h3 id="2-2-删除元素"><a href="#2-2-删除元素" class="headerlink" title="2.2 删除元素"></a>2.2 删除元素</h3><code>1.</code> <code>discard()</code><br><code>2.</code> <code>remove()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a.discard(<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.remove(<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.discard(<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.remove(<span class="hljs-number">11</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>KeyError: <span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><blockquote><p>二者差别在于,当被去除元素不存在时,<code>discard</code>不会报错,<code>remove</code>报错</p></blockquote></li></ul><p><code>3.</code> <code>pop()</code>:去掉任意一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a.pop()<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><code>4.</code> <code>clear()</code> 清空结合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a.update([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.clear()<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">set</span>()<br></code></pre></td></tr></table></figure><h3 id="2-3-集合的逻辑操作"><a href="#2-3-集合的逻辑操作" class="headerlink" title="2.3 集合的逻辑操作"></a>2.3 集合的逻辑操作</h3><p><code>1.</code> <code>&amp;</code> / <code>intersection</code> – 交集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>y = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x&amp;y)<br><span class="hljs-built_in">set</span>()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x.intersection(y))<br><span class="hljs-built_in">set</span>()<br><span class="hljs-meta">&gt;&gt;&gt; </span>x.update([<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x.intersection(y))<br>&#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当二者无交集,则返回空<code>set</code></p></blockquote><p><code>2.</code> <code>-</code> / <code>difference</code> – 差集:只在其一集合中出现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>y = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x-y)<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x.difference(y))<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><p><code>3.</code> <code>^</code> / <code>symmetric_difference</code> – 对称差集:不同时出现在两个集合的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x^y, x.symmetric_difference(y))<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125; &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;<br></code></pre></td></tr></table></figure><p><code>4.</code> <code>union()</code> – 求并集</p><h2 id="3-不可变集合"><a href="#3-不可变集合" class="headerlink" title="3 不可变集合"></a>3 不可变集合</h2><ul><li>由于集合的元素可变,所以无法作为字典的键值</li><li>采用<code>frozenset()</code>可以创建不可变元素的不可变集合  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">frozenset</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">frozenset</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--类</title>
    <link href="/2021/07/07/Python/basic/%E7%B1%BB/"/>
    <url>/2021/07/07/Python/basic/%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="类–CLASS"><a href="#类–CLASS" class="headerlink" title="类–CLASS"></a>类–CLASS</h1><h2 id="python中的类与对象"><a href="#python中的类与对象" class="headerlink" title="python中的类与对象"></a>python中的类与对象</h2><p>类可以说是具有同类型属性（性质 方法 属性）的对象的属性集合</p><ul><li>类中包含的就是该类对象共有的属性（性质 方法 属性）<span id="more"></span>对象则是包含了类中具体属性（性质 方法 属性）的实体</li><li>对象则是具体指明 实现了类中各类属性的实体</li></ul><h3 id="新建一个类"><a href="#新建一个类" class="headerlink" title="新建一个类"></a>新建一个类</h3><p><code>class</code>关键字新建一个类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stu</span>:</span><br><span class="hljs-meta">... </span>    name = <span class="hljs-string">&#x27;aa&#x27;</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display</span>():</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;im aa&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(stu.name)<br>aa<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(stu.display)<br>&lt;function stu.display at <span class="hljs-number">0x00000279CBA24798</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="新建一个类的实例对象"><a href="#新建一个类的实例对象" class="headerlink" title="新建一个类的实例对象"></a>新建一个类的实例对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>cj = stu()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(cj.name)<br>aa<br><span class="hljs-meta">&gt;&gt;&gt; </span>cj.display<br>&lt;bound method stu.display of &lt;__main__.stu <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00000279CBA36CC8</span>&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>除了自定义的属性 方法,python提供一系列的内置属性</p><ul><li><code>__dict__</code>: 包含命名空间的字典</li><li><code>__doc__</code>: 类的说明文档</li><li><code>__name__</code>：类的名称</li><li><code>__module__</code>: 定义类的所在模块</li><li><code>__bases__</code>: 包含基础类的元组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stu</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-string">&#x27;this is test line&#x27;</span><br><span class="hljs-meta">... </span>    name = <span class="hljs-string">&#x27;cj&#x27;</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dis</span>():</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;display&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = stu()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s.__doc__)<br>this <span class="hljs-keyword">is</span> test line<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s.__dict__)<br>&#123;&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s.__module__)<br>__main__<br></code></pre></td></tr></table></figure><h3 id="类构造方法"><a href="#类构造方法" class="headerlink" title="类构造方法"></a>类构造方法</h3><code>__init__()</code>方法用于对象被初始创建时调用,用于初始化生成类的具体属性</li><li>不同于<code>java</code>,<code>python</code>类的属性直接在<code>init</code>函数内声明,不需要额外声明<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stu</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, init_name, init_age</span>):</span><br><span class="hljs-meta">... </span>            self.name = init_name<br><span class="hljs-meta">... </span>            self.age = init_age<br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">introducing</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my name is &quot;</span> + self.name + <span class="hljs-string">&#x27; and im &#x27;</span> + <span class="hljs-built_in">str</span>(self.age) + <span class="hljs-string">&#x27; old.&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = stu(<span class="hljs-string">&#x27;marklily&#x27;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.introducing()<br>my name <span class="hljs-keyword">is</span> marklily <span class="hljs-keyword">and</span> im <span class="hljs-number">18</span> old.<br></code></pre></td></tr></table></figure><h3 id="删除类的属性"><a href="#删除类的属性" class="headerlink" title="删除类的属性"></a>删除类的属性</h3><code>del</code>用于删除对象的某个属性:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s.__dict__<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> s.age<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.__dict__<br>&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承中有<code>子类</code>与<code>父类</code>,甚至<code>祖父类</code>.子类继承父类中的所有属性 方法,并且可以添加新函数 属性</p><h3 id="继承中的添加"><a href="#继承中的添加" class="headerlink" title="继承中的添加"></a>继承中的添加</h3><ul><li><p>子类继承父类中的所有方法,包括构造方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentClass</span>:</span><br>    familyName = <span class="hljs-string">&#x27;c&#x27;</span><br>    familyLocation = <span class="hljs-string">&#x27;sc&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">introducing</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name: &#x27;</span> + self.name + <span class="hljs-string">&#x27;Age: &#x27;</span> + <span class="hljs-built_in">str</span>(self.age))<br><span class="hljs-comment"># 创建一个父类对象 并检验相关属性</span><br>parent = ParentClass(<span class="hljs-string">&#x27;markc&#x27;</span>, <span class="hljs-number">22</span>)<br><span class="hljs-built_in">print</span>(parent.familyName + parent.familyLocation)<br>parent.introducing()<br><span class="hljs-comment"># 创建子类 继承父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildClass</span>(<span class="hljs-params">ParentClass</span>):</span><br>    <span class="hljs-keyword">pass</span><br>child = ChildClass(<span class="hljs-string">&#x27;axlc&#x27;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(child.familyName + child.familyLocation)<br>child.introducing()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">csc<br>Name: markcAge: <span class="hljs-number">22</span><br>csc<br>Name: axlcAge: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>子类添加新函数 新属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildClass</span>(<span class="hljs-params">ParentClass</span>):</span><br>    newFamilyJob = <span class="hljs-string">&#x27;IT&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">newJob</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;new job is &#x27;</span> + <span class="hljs-string">&#x27;IT&#x27;</span>)<br>child = ChildClass(<span class="hljs-string">&#x27;axlc&#x27;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(child.newFamilyJob)<br>child.newJob()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">IT<br>new job <span class="hljs-keyword">is</span> IT<br></code></pre></td></tr></table></figure><h3 id="继承中的覆写"><a href="#继承中的覆写" class="headerlink" title="继承中的覆写"></a>继承中的覆写</h3><p>子类在继承父类方法时间,可对方法做出重写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParentClass</span>:</span><br>    familyName = <span class="hljs-string">&#x27;c&#x27;</span><br>    familyLocation = <span class="hljs-string">&#x27;sc&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">introducing</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name: &#x27;</span> + self.name + <span class="hljs-string">&#x27;Age: &#x27;</span> + <span class="hljs-built_in">str</span>(self.age))<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildClass</span>(<span class="hljs-params">ParentClass</span>):</span><br>    newFamilyJob = <span class="hljs-string">&#x27;IT&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, coupledNum</span>):</span><br>        self.name = name<br>        self.age = age<br>        self.coupledNum = coupledNum<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">newJob</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;new job is &#x27;</span> + <span class="hljs-string">&#x27;IT&#x27;</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">introducing</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name: &#x27;</span> + self.name + <span class="hljs-string">&#x27;Age: &#x27;</span> + <span class="hljs-built_in">str</span>(self.age) + <span class="hljs-string">&#x27;and i only got &#x27;</span> + <span class="hljs-built_in">str</span>(self.coupledNum))<br>child = ChildClass(<span class="hljs-string">&#x27;axlc&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(child.newFamilyJob)<br>child.newJob()<br>child.introducing()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">csc<br>Name: markcAge: <span class="hljs-number">22</span><br>IT<br>new job <span class="hljs-keyword">is</span> IT<br>Name: axlcAge: 2<span class="hljs-keyword">and</span> i only got <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>子类中对构造函数做出了重写,新加入了<code>coupledNum</code>属性,对<code>introducing</code>方法也做出了重写</p><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>当一个子类有多个父类时,多个父类均被继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disA</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disB</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disC</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">son</span>(<span class="hljs-params">A,B,C</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disSon</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;son&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>son = son()<br><span class="hljs-meta">&gt;&gt;&gt; </span>son.disA()<br>A<br><span class="hljs-meta">&gt;&gt;&gt; </span>son.disB()<br>B<br><span class="hljs-meta">&gt;&gt;&gt; </span>son.disC()<br>C<br><span class="hljs-meta">&gt;&gt;&gt; </span>son.disSon()<br>son<br></code></pre></td></tr></table></figure><h2 id="多级继承"><a href="#多级继承" class="headerlink" title="多级继承"></a>多级继承</h2><p>基因代代相传,孝景帝之子中山靖王之后<code>刘玄德</code>也可以用的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disA</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span>(<span class="hljs-params">A</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disD</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;D&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span>(<span class="hljs-params">D</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disE</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;E&#x27;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>e = E()<br><span class="hljs-meta">&gt;&gt;&gt; </span>e.disA()<br>A<br><span class="hljs-meta">&gt;&gt;&gt; </span>e.disD()<br>D<br><span class="hljs-meta">&gt;&gt;&gt; </span>e.disE()<br>E<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy--NumpyNotes</title>
    <link href="/2021/07/07/numpy/NumpyNotes/"/>
    <url>/2021/07/07/numpy/NumpyNotes/</url>
    
    <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="1-ndarray"><a href="#1-ndarray" class="headerlink" title="1.ndarray"></a>1.ndarray</h2><p>Numpy的数组类是<code>ndarray</code>，但其不同于<code>array</code>（只是一个以为数组）</p><span id="more"></span><ul><li>ndarray.ndim:数组的dimension,Python中的rank</li><li>nmarray.shape:数组的维数</li><li>ndarray.size:数组中所有元素的数量</li><li>ndarray.dtype:数组中所有元素的类型</li><li>ndarray.itemsize:数组中元素的大小,字节为单位</li><li>ndarray.data:存储array的缓冲<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_info</span>(<span class="hljs-params">ndarr1</span>):</span><br>    <span class="hljs-built_in">print</span>(ndarr1, <span class="hljs-string">&#x27;basic info:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dimension:&#x27;</span>, ndarr1.ndim)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;shape:&#x27;</span>, ndarr1.shape)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;size:&#x27;</span>, ndarr1.size)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dtype:&#x27;</span>, ndarr1.dtype)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;itemsize&#x27;</span>, ndarr1.itemsize)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;data:&#x27;</span>, ndarr1.data)<br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>arr2 = np.array([(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)])<br>arr2 = np.array([(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>), (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)])<br>get_all_info(arr1)<br>get_all_info(arr2)<br></code></pre></td></tr></table></figure>this tures out:<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts">[<span class="hljs-number">1</span> <span class="hljs-number">2</span>] basic info:<br><span class="hljs-symbol">dimension:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">shape:</span> (<span class="hljs-number">2</span>,)<br><span class="hljs-symbol">size:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">dtype:</span> int32<br>itemsize <span class="hljs-number">4</span><br><span class="hljs-symbol">data:</span> <span class="hljs-params">&lt;memory at <span class="hljs-number">0x000001EEBB018348</span>&gt;</span><br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br> [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br> [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]] basic info:<br><span class="hljs-symbol">dimension:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">shape:</span> (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br><span class="hljs-symbol">size:</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">dtype:</span> int32<br>itemsize <span class="hljs-number">4</span><br><span class="hljs-symbol">data:</span> <span class="hljs-params">&lt;memory at <span class="hljs-number">0x000001EEBB02F908</span>&gt;</span><br></code></pre></td></tr></table></figure>TIPS:</li></ul><ol><li><p><code>array.shape</code>与<code>np.shape()</code>的区别</p><blockquote><p><code>array.shape</code>获取的是某个具体已声明的<code>ndarray</code>的<code>属性</code>,在其初始化时已经确定</p></blockquote><blockquote><p><code>np.shape()</code>是np包中的一个方法,传入一个<code>ndarray</code>作为参数,获取其shape</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = np.array([(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>), (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arr3.shape gets: &#x27;</span>, arr3.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;np.shape(arr3) gets :&#x27;</span>, np.shape(arr3))<br></code></pre></td></tr></table></figure><p> this turns out:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3.shape gets:  (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>np.shape(arr3) gets : (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure></blockquote></li><li><p>也可以在创建<code>ndarray</code>时指定数据类型(dtype):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = np.array([(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>), (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)])<br>arr4 = np.array([(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>), (<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)], dtype=np.uint8)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arr3`s dtype is&#x27;</span>, arr3.dtype)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arr4`s dtype is&#x27;</span>, arr4.dtype)<br></code></pre></td></tr></table></figure><p>it turns out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3s dtype <span class="hljs-keyword">is</span> int32<br>arr4s dtype <span class="hljs-keyword">is</span> uint8<br></code></pre></td></tr></table></figure><h2 id="2-常见特定数组"><a href="#2-常见特定数组" class="headerlink" title="2.常见特定数组"></a>2.常见特定数组</h2></li><li><p>zeros:数组中元素为0</p></li><li><p>ones:1</p></li><li><p>empty:类似与0,but not</p></li><li><p>arange:在将一维数组按跨度分隔</p></li><li><p>linespace:将一维数组均分</p></li><li><p>random:随机</p><ol><li>随机数方法:<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> random() 0-1内的随机实数<br><span class="hljs-bullet">*</span> uniform(a, b) a-b内的随机浮点数<br><span class="hljs-bullet">*</span> randint(a, b) a-b内的随机整数<br><span class="hljs-bullet">*</span> 一些其他方法<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.zeros((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>b = np.ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br>c = np.empty((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))<br>d = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.3</span>)<br>e = np.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">7</span>)<br>f = np.random.random((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(a,b,c,d,e,f)<br></code></pre></td></tr></table></figure>it turns out:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">[[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]<br> [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]<br>[[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]<br> [<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]]<br>[[<span class="hljs-number">0.00000000e+000</span> <span class="hljs-number">0.00000000e+000</span> <span class="hljs-number">0.00000000e+000</span> <span class="hljs-number">0.00000000e+000</span>]<br> [<span class="hljs-number">0.00000000e+000</span> <span class="hljs-number">2.03555046e-321</span> <span class="hljs-number">1.42410974e-306</span> <span class="hljs-number">0.00000000e+000</span>]]<br>[<span class="hljs-number">1.</span>  <span class="hljs-number">1.3</span> <span class="hljs-number">1.6</span> <span class="hljs-number">1.9</span>]<br>[<span class="hljs-number">1.</span>         <span class="hljs-number">1.16666667</span> <span class="hljs-number">1.33333333</span> <span class="hljs-number">1.5</span>        <span class="hljs-number">1.66666667</span> <span class="hljs-number">1.83333333</span><br> <span class="hljs-number">1.</span>        ]<br>[[<span class="hljs-number">0.56551478</span> <span class="hljs-number">0.58715817</span> <span class="hljs-number">0.51182441</span>]<br> [<span class="hljs-number">0.18129758</span> <span class="hljs-number">0.33167464</span> <span class="hljs-number">0.66718211</span>]]<br></code></pre></td></tr></table></figure>TIPS:</li></ol></li><li><p><code>np.empty</code></p><blockquote><p>创建一个没有任何具体值的ndarray数组，是创建数组最快的方法</p></blockquote><blockquote><p>不会给元素初始化值,运行速度快于<code>ones</code>,但具体使用需要用户手动赋值</p></blockquote></li></ol><h2 id="形状与操作"><a href="#形状与操作" class="headerlink" title="形状与操作"></a>形状与操作</h2><h3 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h3><ul><li>reshape：用于基于现有数组和指定形状生成新数组，就是重塑行列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;original a = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a), <span class="hljs-string">&#x27;and shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a.shape))<br>a = a.reshape(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a.reshape(3, -1) = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a), <span class="hljs-string">&#x27;and shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a.shape))<br></code></pre></td></tr></table></figure>it turens out<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">original a = <br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br> <span class="hljs-keyword">and</span> shape = <br>(<span class="hljs-number">9</span>,)<br><br>a.reshape(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>) =<br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br> [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br> [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<br> <span class="hljs-keyword">and</span> shape =<br>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>其中参数2 = -1,即视情况而定,将其转换为3*3<br> reshape前后的元素个数一定保持一致才能进行转换</p></blockquote></li><li>vstack：用于在垂直方向上堆叠多个数组(数组的维度必须匹配)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;original a = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a), <span class="hljs-string">&#x27;and shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a.shape))<br>b = np.arange(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;original b = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(b), <span class="hljs-string">&#x27;and shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(b.shape))<br>c = np.vstack((a, b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;vstack ((a, b)) = c = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(c), <span class="hljs-string">&#x27;and shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(c.shape))<br></code></pre></td></tr></table></figure>it turns out:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">original a = <br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]<br> <span class="hljs-keyword">and</span> shape = <br>(<span class="hljs-number">2</span>,)<br>original b =<br>[<span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br> <span class="hljs-keyword">and</span> shape =<br>(<span class="hljs-number">2</span>,)<br>vstack ((a, b)) = c =<br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]<br> [<span class="hljs-number">4</span> <span class="hljs-number">5</span>]]<br> <span class="hljs-keyword">and</span> shape =<br>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li>hstack：用于水平方向堆叠多个数组(数组的维度必须匹配)</li><li>hsplit：用于水平分割数组</li><li>vsplit：用于垂直分割数组</li></ul><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p>通过index访问数组中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>),(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><ul><li>可以通过创建一个包含目标index的数组来访问获取目标数组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br>a_index_five = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a[a_index_five] = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a[a_index_five]))<br></code></pre></td></tr></table></figure>it tures out:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a[a_index_five] = <br>[<span class="hljs-number">100</span> <span class="hljs-number">104</span> <span class="hljs-number">108</span> <span class="hljs-number">112</span> <span class="hljs-number">116</span> <span class="hljs-number">120</span> <span class="hljs-number">124</span> <span class="hljs-number">128</span> <span class="hljs-number">132</span> <span class="hljs-number">136</span> <span class="hljs-number">140</span> <span class="hljs-number">144</span> <span class="hljs-number">148</span> <span class="hljs-number">152</span> <span class="hljs-number">156</span> <span class="hljs-number">160</span> <span class="hljs-number">164</span> <span class="hljs-number">168</span><br> <span class="hljs-number">172</span> <span class="hljs-number">176</span> <span class="hljs-number">180</span> <span class="hljs-number">184</span> <span class="hljs-number">188</span> <span class="hljs-number">192</span> <span class="hljs-number">196</span>]<br></code></pre></td></tr></table></figure></li><li>下标数组也可以是多维的,并将获得的数据转换为多维度数组(维度同下标数组)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br>a_index_five = np.array([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a_index_five = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a_index_five), <span class="hljs-string">&#x27;shape= \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a_index_five.shape))<br>a_select = a[a_index_five]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a[a_index_five] = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a_select), <span class="hljs-string">&#x27;shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a_select.shape))<br></code></pre></td></tr></table></figure>it turns out:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a_index_five = <br>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>]       <br> [<span class="hljs-number">10</span> <span class="hljs-number">20</span>]]      <br> shape= <br>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)  <br><br>a[a_index_five] =<br>[[<span class="hljs-number">101</span> <span class="hljs-number">102</span>]<br> [<span class="hljs-number">110</span> <span class="hljs-number">120</span>]]<br> shape =<br>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li>二维数组的访问<ol><li>一维访问<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br>a = a.reshape(<span class="hljs-number">10</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 指定一个下标[i],则获取该行元素(第i个数组)</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># 指定两个连续的下标[i][j],则获取该行该个元素(i行j列)</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure>it turns out<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">100</span> <span class="hljs-number">101</span> <span class="hljs-number">102</span> <span class="hljs-number">103</span> <span class="hljs-number">104</span> <span class="hljs-number">105</span> <span class="hljs-number">106</span> <span class="hljs-number">107</span> <span class="hljs-number">108</span> <span class="hljs-number">109</span>]<br><span class="hljs-number">103</span>   <br></code></pre></td></tr></table></figure></li><li>二维访问需通过<code>:</code>指定范围<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a[2:4, 2:5 = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>, <span class="hljs-number">2</span>:<span class="hljs-number">5</span>]))<br></code></pre></td></tr></table></figure>turns out:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[[<span class="hljs-number">122</span> <span class="hljs-number">123</span> <span class="hljs-number">124</span>]<br>[<span class="hljs-number">132</span> <span class="hljs-number">133</span> <span class="hljs-number">134</span>]]  <br></code></pre></td></tr></table></figure><blockquote><p><code>2:4, 2:5</code>指第2 3行下的第 2 3 4列<br><code>Tips:</code><br>使用<code>x,:</code> 或 <code>:,y</code> 获取第x行所有 与 y列所有</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a[2,:] = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a[<span class="hljs-number">2</span>,:]))<br></code></pre></td></tr></table></figure>turns out<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a[<span class="hljs-number">2</span>,:] = <br>[<span class="hljs-number">120</span> <span class="hljs-number">121</span> <span class="hljs-number">122</span> <span class="hljs-number">123</span> <span class="hljs-number">124</span> <span class="hljs-number">125</span> <span class="hljs-number">126</span> <span class="hljs-number">127</span> <span class="hljs-number">128</span> <span class="hljs-number">129</span>]<br></code></pre></td></tr></table></figure><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2>np中矩阵仍然是ndarray,只是以矩阵的方式操作</li></ol></li><li>转置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, size=[<span class="hljs-number">4</span>, <span class="hljs-number">4</span>])  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;original a = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a.T = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a.T))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a.transpose = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a.transpose()))<br></code></pre></td></tr></table></figure> turns out: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>]<br>[<span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>]<br>[<span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span>]]<br><br>a.T =<br>[[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span>]]<br><br>a.transpose =<br>[[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span>]]<br></code></pre></td></tr></table></figure></li><li>dot乘法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, size=[<span class="hljs-number">4</span>, <span class="hljs-number">4</span>])  <br>b = np.uint(np.ones((<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)))<br>c = np.dot(a, b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(a.shape),<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;b shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(b.shape))<br><span class="hljs-built_in">print</span>(a.dot(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c shape = \n&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(c.shape))<br></code></pre></td></tr></table></figure> turns out: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a shape = <br>(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)<br><br>b shape =<br>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br><br>[[<span class="hljs-number">8</span>]<br>[<span class="hljs-number">5</span>]<br>[<span class="hljs-number">6</span>]<br>[<span class="hljs-number">6</span>]]<br>c shape =<br>(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Numpy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--map函数</title>
    <link href="/2021/07/07/Python/advance/map%E5%87%BD%E6%95%B0/"/>
    <url>/2021/07/07/Python/advance/map%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h1><ul><li>python内置函数</li><li>会根据给定函数,对指定序列做出映射<span id="more"></span><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="map-function-iterable"><a href="#map-function-iterable" class="headerlink" title="map(function, iterable...)"></a><code>map(function, iterable...)</code></h3></li><li><code>iterable</code> 作为映射中原数据的来源</li><li><code>function</code> 用于对<code>iterable</code>中的元素进行转换  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt; <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">squ</span>(<span class="hljs-params">x</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> x * x<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>mapResult = <span class="hljs-built_in">map</span>(squ, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure></li><li><code>python 2.</code> 返回列表</li><li><code>python 3.</code> 返回迭代器  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(mapResult.__class__)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">map</span>&#x27;&gt;</span><br><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">for</span> <span class="hljs-title">i</span> <span class="hljs-title">in</span> <span class="hljs-title">mapResult</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i)<br>...<br><span class="hljs-number">1</span><br><span class="hljs-number">4</span><br><span class="hljs-number">9</span><br><span class="hljs-number">16</span><br><span class="hljs-number">25</span><br></code></pre></td></tr></table></figure></li><li>可通过<code>list(map())</code>的显示转换来消除版本之间的差异  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">squ</span>(<span class="hljs-params">x</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> x * x<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(squ, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]))<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(list1)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br></code></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a><code>lambda</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x : x * x, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])))<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br></code></pre></td></tr></table></figure></li></ul><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="map完成数据类型转换"><a href="#map完成数据类型转换" class="headerlink" title="map完成数据类型转换"></a><code>map</code>完成数据类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])))<br>[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="map元组转列表"><a href="#map元组转列表" class="headerlink" title="map元组转列表"></a><code>map</code>元组转列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(list1)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><ul><li>原理是:元组作为迭代器可作为<code>map()</code>函数参数传入,当元组内部元素数据类型与<code>function</code>转出数据类型一致时,再将<code>map</code>返回迭代器转为列表</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>advance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy100--Numpy100</title>
    <link href="/2021/07/07/numpy/numpy100/"/>
    <url>/2021/07/07/numpy/numpy100/</url>
    
    <content type="html"><![CDATA[<h1 id="github上的开源项目"><a href="#github上的开源项目" class="headerlink" title="github上的开源项目"></a>github上的开源项目</h1><h2 id="2021-7-4-17：06"><a href="#2021-7-4-17：06" class="headerlink" title="2021.7.4 17：06"></a>2021.7.4 17：06</h2><span id="more"></span><h3 id="创建一个长度为10的空向量"><a href="#创建一个长度为10的空向量" class="headerlink" title="创建一个长度为10的空向量"></a>创建一个长度为10的空向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.zeros(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h3 id="找到数组的内存大小"><a href="#找到数组的内存大小" class="headerlink" title="找到数组的内存大小"></a>找到数组的内存大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.zeros(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(z.size * z.itermsize)<br></code></pre></td></tr></table></figure><blockquote><p>z.size获取到内部的元素个数<br>z.itemsize获取到各个元素的大小</p></blockquote><h3 id="从命令行对得到相关函数的说明文档"><a href="#从命令行对得到相关函数的说明文档" class="headerlink" title="从命令行对得到相关函数的说明文档"></a>从命令行对得到相关函数的说明文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pythoh">print(np.info(np.add))<br></code></pre></td></tr></table></figure><h3 id="创建一个长度为10-且除了第五个元素为1的空向量"><a href="#创建一个长度为10-且除了第五个元素为1的空向量" class="headerlink" title="创建一个长度为10,且除了第五个元素为1的空向量"></a>创建一个长度为10,且除了第五个元素为1的空向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.zeros(<span class="hljs-number">10</span>)<br>z[<span class="hljs-number">4</span>] = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h3 id="创建值域10-49的向量"><a href="#创建值域10-49的向量" class="headerlink" title="创建值域10-49的向量"></a>创建值域10-49的向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.arange(<span class="hljs-number">10</span>, <span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><h3 id="反转一个向量"><a href="#反转一个向量" class="headerlink" title="反转一个向量"></a>反转一个向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(z)<br>z = z[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><p><code>b = [0 1 2 3 4]</code><br><code>a = b[x : y]</code>: 两索引各自计算,正值从左侧开始,负值从右侧开始</p><ul><li>左侧索引元素在右侧索引元素左侧,则返回非空</li><li>某侧无索引则代表,从另一侧索引顺方向计数完</li><li>a为两侧索引之内交集元素返回的array</li><li>若两侧索引之内无元素,则a为空array<blockquote><p>a = b[4:2] : a = []<br>a = b[-3:4] : a = []<br>a = b[4:-2] : a = []</p></blockquote></li></ul><ol><li><code>x&gt;0</code> <code>y&gt;0</code></li></ol><ul><li>a = b[x:y]: a = x-y内元素返回array</li><li>a = b[ :y]: a = 0-y内元素返回</li><li>a = b[x: ]: a = x-len(b)内元素返回</li><li>x &lt; y : a = []</li></ul><ol start="2"><li><code>x&lt;0</code> or <code>y&lt;0</code></li></ol><ul><li>a = b[-4:-1]: a = b中-4号元素到-1号元素返回</li><li>a = b[-4:1]: a = []</li><li>a = b[-4:]: a = -4 - 0索引之间元素返回</li><li>a = b[:-4]: a = []</li><li>a = b[3:-4]: a = []</li></ul><ol start="3"><li><code>a = b[::a]</code></li></ol><ul><li>在b中没隔a取一个元素返回a</li><li>取值方向由a正负决定</li></ul><h3 id="创建一个3-3-值域-0-8的矩阵"><a href="#创建一个3-3-值域-0-8的矩阵" class="headerlink" title="创建一个3 * 3,值域:0-8的矩阵"></a>创建一个3 * 3,值域:0-8的矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h3 id="找到数组中的0元素索引"><a href="#找到数组中的0元素索引" class="headerlink" title="找到数组中的0元素索引"></a>找到数组中的0元素索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(z.nonzero())<br></code></pre></td></tr></table></figure><h3 id="创建一个3-3的单位矩阵"><a href="#创建一个3-3的单位矩阵" class="headerlink" title="创建一个3 * 3的单位矩阵"></a>创建一个<code>3 * 3</code>的单位矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.eye(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h3 id="创建一个3-3的随机数据"><a href="#创建一个3-3的随机数据" class="headerlink" title="创建一个3 * 3的随机数据"></a>创建一个<code>3 * 3</code>的随机数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br>z = np.random.random((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h3 id="创建一个10-10的随机数组-并获取最小与最大值"><a href="#创建一个10-10的随机数组-并获取最小与最大值" class="headerlink" title="创建一个10 * 10的随机数组,并获取最小与最大值"></a>创建一个<code>10 * 10</code>的随机数组,并获取最小与最大值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br>z = np.random.random((<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(z.<span class="hljs-built_in">min</span>(), z.<span class="hljs-built_in">max</span>())<br></code></pre></td></tr></table></figure><h3 id="创建一个长度为30的随机向量-并获取其平均值"><a href="#创建一个长度为30的随机向量-并获取其平均值" class="headerlink" title="创建一个长度为30的随机向量,并获取其平均值"></a>创建一个长度为<code>30</code>的随机向量,并获取其平均值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br>z = np.random.random((<span class="hljs-number">30</span>))<br>zMean = z.mean()<br><span class="hljs-built_in">print</span>(zMean)<br></code></pre></td></tr></table></figure><h3 id="创建一个二维数组-其边界值为1-其余值为0"><a href="#创建一个二维数组-其边界值为1-其余值为0" class="headerlink" title="创建一个二维数组,其边界值为1,其余值为0"></a>创建一个二维数组,其边界值为1,其余值为0</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.ones((<span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br>z[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>:-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>其原理是:用array[a:b,c:d] = x进行对二维数组赋值的方式</li><li>array[1:-1,1:-1] = x其原理类似a = b[1:-1]从行索引为从第一行到-1行(及倒是第二行),这样根据每个array的大小去调整参数</li></ul><h3 id="对于一个存在的数组-如何用0填充其边界"><a href="#对于一个存在的数组-如何用0填充其边界" class="headerlink" title="对于一个存在的数组,如何用0填充其边界"></a>对于一个存在的数组,如何用0填充其边界</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.ones((<span class="hljs-number">6</span>, <span class="hljs-number">6</span>))<br>z = np.pad(z, pad_width=<span class="hljs-number">1</span>, mode=<span class="hljs-string">&#x27;constant&#x27;</span>, constant_values=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h3 id="下列各式的运行结果"><a href="#下列各式的运行结果" class="headerlink" title="下列各式的运行结果"></a>下列各式的运行结果</h3><ol><li><code>0 * np.nan</code> –&gt; <code>nan</code></li><li><code>np.nan==np.nan</code> –&gt; <code>False</code></li><li><code>np.inf &gt; np.nan</code> –&gt; <code>False</code></li><li><code>np.nan - np.nan</code> –&gt; <code>nan</code></li><li><code>0.3 == 3 * 0.1</code> –&gt; <code>False</code></li></ol><ul><li>nan 不是数字,是不存在</li><li>inf infinite</li></ul><h3 id="创建一个5-5的矩阵-并设置1-2-3-4落在其对角线的下方"><a href="#创建一个5-5的矩阵-并设置1-2-3-4落在其对角线的下方" class="headerlink" title="创建一个5 * 5的矩阵,并设置1 2 3 4落在其对角线的下方"></a>创建一个<code>5 * 5</code>的矩阵,并设置<code>1 2 3 4</code>落在其对角线的下方</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Z = np.diag(<span class="hljs-number">1</span>+np.arange(<span class="hljs-number">4</span>), k = -<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(Z)<br></code></pre></td></tr></table></figure><ul><li><code>np.diag(array_like, k)</code></li></ul><ol><li>返回此array第k位置对角线的矩阵</li><li>当只传入矩阵,则返回此矩阵的对角线元素</li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Numpy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--装饰器</title>
    <link href="/2021/07/07/Python/advance/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2021/07/07/Python/advance/python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>Python装饰器能够动态地改变函数 方法 类的功能,而不用子类重写或修改函数源代码的方式   </p><span id="more"></span><h2 id="装饰器函数"><a href="#装饰器函数" class="headerlink" title="装饰器函数"></a>装饰器函数</h2><h3 id="装饰器函数基础"><a href="#装饰器函数基础" class="headerlink" title="装饰器函数基础"></a>装饰器函数基础</h3><p><code>装饰器</code> 增强了其他函数的功能</p><ul><li>任何将函数作为传入参数并返回一个增强函数的函数都可以视为一个装饰器函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义装饰器函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decoratorFunc</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-keyword">return</span> f<br><span class="hljs-comment"># 语法糖 进行函数装饰</span><br><span class="hljs-meta">@decoratorFunc</span><br><span class="hljs-comment"># 定义待装饰函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toBeEnforce</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this function has been enforced&#x27;</span>)<br><span class="hljs-comment"># 调用增强后的函数</span><br>toBeEnforce()<br></code></pre></td></tr></table></figure><h3 id="装饰器函数语法糖"><a href="#装饰器函数语法糖" class="headerlink" title="装饰器函数语法糖"></a>装饰器函数语法糖</h3></li><li><code>@decoratorFunction</code>作为语法糖:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@decoratorFunc</span><br></code></pre></td></tr></table></figure>等效于:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_function = super_secret_function(my_function)<br></code></pre></td></tr></table></figure>以上代码等效于<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义装饰器函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decoratorFunc</span>(<span class="hljs-params">f</span>):</span><br>    <span class="hljs-keyword">return</span> f<br><span class="hljs-comment"># 定义待装饰函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toBeEnforce</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this function has been enforced&#x27;</span>)<br><span class="hljs-comment"># 进行装饰</span><br>toBeEnforce = decoratorFunc(toBeEnforce)<br><span class="hljs-comment"># 调用装饰后的函数</span><br>toBeEnforce()<br></code></pre></td></tr></table></figure></li><li>当然,此案例没有函数装饰作用<h3 id="装饰器函数理解"><a href="#装饰器函数理解" class="headerlink" title="装饰器函数理解"></a>装饰器函数理解</h3></li><li>假设我们现有一个函数用于计算函数的<code>sin cos</code>值的函数:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calSinCos</span>(<span class="hljs-params">alpha</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> [math.sin(alpha), math.cos(alpha)]<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>calSinCos(<span class="hljs-number">0.5</span>)<br>[<span class="hljs-number">0.479425538604203</span>, <span class="hljs-number">0.8775825618903728</span>]<br></code></pre></td></tr></table></figure></li><li>现需要这个函数输出这个角度半角的<code>sin cos</code>的值<ul><li>solution1: ``calSinCos(aplha/2)  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>calSinCos(<span class="hljs-number">0.5</span>/<span class="hljs-number">2</span>)<br>[<span class="hljs-number">0.24740395925452294</span>, <span class="hljs-number">0.9689124217106447</span>]<br></code></pre></td></tr></table></figure></li><li>solution2: 使用装饰器,使这个函数同时返回我们需要的两个值:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decoratorCal</span>(<span class="hljs-params">f</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner_function</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br><span class="hljs-meta">... </span>            temp_list_sin = []<br><span class="hljs-meta">... </span>            temp_list_cos = []<br><span class="hljs-meta">... </span>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> args:<br><span class="hljs-meta">... </span>                    temp_list_sin.append(math.sin(i))<br><span class="hljs-meta">... </span>                    temp_list_cos.append(math.cos(i))<br><span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> f(*args, **kwargs), temp_list_sin, temp_list_cos<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> inner_function<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>@decoratorCal<br><span class="hljs-meta">... </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cal</span>(<span class="hljs-params">a</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> [math.sin(a), math.cos(a)]<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(cal(<span class="hljs-number">0.3</span>))<br>([<span class="hljs-number">0.29552020666133955</span>, <span class="hljs-number">0.955336489125606</span>], [<span class="hljs-number">0.29552020666133955</span>], [<span class="hljs-number">0.955336489125606</span>])  <br></code></pre></td></tr></table></figure></li></ul></li><li>装饰器函数工作流程:<ul><li>调用待增强函数<code>cal(0.3)</code>时,同时调用装饰器函数<code>decoratorCal</code></li><li><code>decoratorCal</code>内部定义了我们真正寄希望完成预期功能的函数<code>inner_function</code></li><li><code>return inner_function</code>时便开始执行<code>inner_function</code>内代码,首先是完成基于原<code>cal(0.3)</code>的新加功能,最后<code>return f(*args, **kwargs)</code><ul><li>当然也可以<code>return</code> 其他想要的数据</li><li>不一定要返回原函数</li></ul></li><li><code>return f(*args, **kwargs)</code>便开始执行<code>cal(0.3)</code>原函数的功能</li><li>最后得到所有的返回值</li></ul></li><li>从流程上看,<code>cal</code>原函数作为参数,真正运行的是<code>inner_function</code>,<code>inner_function</code>运行后返回<code>cal</code>,<code>cal</code>再运行本身的功能</li><li>之所以<code>decoratorCal</code>必须返回一个函数<code>inner_function</code>,是为了借<code>return</code>来执行<code>inner_function</code>内部我们新加功能的代码</li></ul><hr><ul><li>装饰器更像是一种语法逻辑的产物</li></ul><hr><h2 id="装饰器类"><a href="#装饰器类" class="headerlink" title="装饰器类"></a>装饰器类</h2><p>将装饰器封装为类,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义装饰器类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Decorator</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># 初始化,将待装饰方法赋值给装饰器类,作为其属性(对象方法)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, func</span>):</span><br>        self.func = func<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-comment"># 调用此方法</span><br>        res = self.func(*args, **kwargs)<br>        <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">testfunc</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Inside the function.&#x27;</span>)<br><br>testfunc = Decorator(testfunc)<br><br>testfunc()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>advance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--列表推导式</title>
    <link href="/2021/07/07/Python/advance/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <url>/2021/07/07/Python/advance/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><h2 id="列表推导式基础"><a href="#列表推导式基础" class="headerlink" title="列表推导式基础"></a>列表推导式基础</h2><ul><li><code>result = [ &lt;expression&gt; for &lt;element&gt; in &lt;iterable&gt; ]</code></li><li>根据现有迭代器类<code>iterable</code><span id="more"></span></li><li>对其中每个元素<code>element</code></li><li>根据函数<code>expression</code>进行相应变化得到结果元素</li><li>将结果元素立即添加到<code>result</code>中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>testSquares = [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(testSquares)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br></code></pre></td></tr></table></figure><h2 id="if条件-可选"><a href="#if条件-可选" class="headerlink" title="if条件(可选):"></a><code>if</code>条件(可选):</h2><code>result = [ &lt;expression&gt; for &lt;element&gt; in &lt;iterable&gt; if &lt;condition&gt; ]</code></li><li>每个元素在进行<code>expression</code>前。</li><li>所有结果将在新列表中立即返回。</li><li>Python 中的生成器表达式是懒惰地计算的，但是列表推导会立即施加到整个迭代器，它消耗与迭代器长度成比例的内存。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>testSquares = [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(testSquares)<br>[<span class="hljs-number">4</span>, <span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 根据列表<span class="hljs-code">``(1,2,3,4,5)`</span>` 创建一个平方数列表,<br><span class="hljs-bullet">*</span> 只选择其中的偶数进行创建<br></code></pre></td></tr></table></figure><h2 id="else"><a href="#else" class="headerlink" title="else:"></a><code>else</code>:</h2><code>if...else</code> 判断是在 <code>for</code> 循环之前使用，而非以后：</li><li><code>if...else</code>在<code>for</code>后 报错<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>testStr = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcd&#x27;</span> <span class="hljs-keyword">if</span> x <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;b&#x27;</span>]<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span><br>    testStr = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcd&#x27;</span> <span class="hljs-keyword">if</span> x <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;b&#x27;</span>]<br>                                                ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure></li><li><code>if...else</code> 在 <code>for</code> 前</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>testStr = [x <span class="hljs-keyword">if</span> x <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcd&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(testStr)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>advance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--发生器</title>
    <link href="/2021/07/07/Python/advance/%E5%8F%91%E7%94%9F%E5%99%A8/"/>
    <url>/2021/07/07/Python/advance/%E5%8F%91%E7%94%9F%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="发生器"><a href="#发生器" class="headerlink" title="发生器"></a>发生器</h1><ul><li><p>Python发生器通过关键字<code>yeild</code>创建</p></li><li><p>或通过发生器表达式 <code>expression for x in an_iterator</code>创建</p><span id="more"></span></li><li><p>生成器保存的算法而非具体数据,因此节约了内存</p><h2 id="发生器-1"><a href="#发生器-1" class="headerlink" title="发生器"></a>发生器</h2></li><li><p>发生器返回对象为 <code>generator</code></p><h3 id="发生器表达式"><a href="#发生器表达式" class="headerlink" title="发生器表达式"></a>发生器表达式</h3></li><li><p>发生器类似于列表推导式,但发生器用<code>()</code>声明</p></li><li><p>当发生器作为函数的唯一参数时,不必多重括号:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printL</span>(<span class="hljs-params">list1</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:<br><span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(i)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>printL(x * <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-number">0</span><br><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br><span class="hljs-number">8</span><br><span class="hljs-number">10</span><br><span class="hljs-number">12</span><br><span class="hljs-number">14</span><br><span class="hljs-number">16</span><br><span class="hljs-number">18</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>((x * <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)).__class__)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">generator</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="发生器函数"><a href="#发生器函数" class="headerlink" title="发生器函数"></a>发生器函数</h3></li><li><p>生成器函数类似常规函数</p></li><li><p>生成器函数内部有多个或一个<code>yield</code>关键字</p></li><li><p>生成器函数无返回值 <code>return</code></p></li><li><p>如果要提前停止发生器,则提前使用空<code>return</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generatorFunc</span>():</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-meta">... </span>            <span class="hljs-keyword">yield</span> i * <span class="hljs-number">2</span><br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>l = generatorFunc()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i)<br>...<br><span class="hljs-number">0</span><br><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h4 id="所有的生成器表达式都有自己对应的生成器函数-反之亦然"><a href="#所有的生成器表达式都有自己对应的生成器函数-反之亦然" class="headerlink" title="所有的生成器表达式都有自己对应的生成器函数,反之亦然"></a>所有的生成器表达式都有自己对应的生成器函数,反之亦然</h4><h3 id="一次性"><a href="#一次性" class="headerlink" title="一次性"></a>一次性</h3><p>生成器对象是一次性的,当一次迭代完成后,则该生成器对象内部函数被销毁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>l = generatorFunc()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i)<br>...<br><span class="hljs-number">0</span><br><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br><span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(l))<br>Traceback (most recent call last):<br>File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>StopIteration<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li><li><p>生成器的主体不会立即执行：当调用生成器函数时，它只会返回生成器对象，而不去执行第一个 print 语句。</p></li><li><p>这使得生成器比返回列表的函数消耗更少的内存，并且它能够实现生成无限长的序列。</p></li><li><p>因此,生成器通常用于数据科学以及涉及大量数据的其他环境。</p></li><li><p>另一个优点是其他代码可以立即使用生成器产生的值，而无需等待生成完整的序列。</p></li><li><p>但是，如果你需要多次使用生成器生成的值，并且如果生成它们的成本高于存储，则将 list 生成的值存储为比重新生成序列更好。</p></li></ul><h3 id="next-函数"><a href="#next-函数" class="headerlink" title=".next()函数"></a><code>.next()</code>函数</h3><p>用于从生成器中获取值,并提供迭代结束的默认值</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>advance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--多线程</title>
    <link href="/2021/07/07/Python/advance/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/07/07/Python/advance/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>python多线程并非真正意义上的多线程</p><ul><li>每个进程运行时都需要等到<code>GIL</code>释放,然后得到<code>GIL</code>后上锁</li><li>因此,同一时间只有一个<code>python</code>线程在运行<span id="more"></span><h2 id="创建线程-threading-Thread"><a href="#创建线程-threading-Thread" class="headerlink" title="创建线程 threading.Thread"></a>创建线程 <code>threading.Thread</code></h2>使用<code>threading</code>,创建新的<code>threading.Thread</code>,为其分配要执行的函数来启动新的执行线程<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> threading<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Running...&quot;</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>test_thread = threading.Thread(target=test)<br></code></pre></td></tr></table></figure></li><li><code>target</code> 传入函数或可调用对象</li><li>在<code>Thread</code>调用<code>start()</code>方法前,线程不会开始</li></ul><h2 id="开始线程-Thread-start"><a href="#开始线程-Thread-start" class="headerlink" title="开始线程 Thread.start()"></a>开始线程 <code>Thread.start()</code></h2><p><code>Thread.start()</code>开始线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>test_thread.start()<br>Running...<br></code></pre></td></tr></table></figure><ul><li>当一个线程运行结束,再次调用<code>start()</code>方法,则会报错:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>test_thread.start()<br>Running...<br><span class="hljs-meta">&gt;&gt;&gt; </span>test_thread.start()<br>Traceback (most recent call last):<br>File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>File <span class="hljs-string">&quot;D:\Python37\lib\threading.py&quot;</span>, line <span class="hljs-number">848</span>, <span class="hljs-keyword">in</span> start<br>    <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;threads can only be started once&quot;</span>)<br>RuntimeError: threads can only be started once<br></code></pre></td></tr></table></figure></li><li>若想将线程设置为守护线程持续运行,则需设置<code>daemon=True</code></li></ul><h2 id="加入线程-Thread-join"><a href="#加入线程-Thread-join" class="headerlink" title="加入线程 Thread.join()"></a>加入线程 <code>Thread.join()</code></h2>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>advance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--拷贝</title>
    <link href="/2021/07/07/Python/advance/%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/07/07/Python/advance/%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h1><ul><li>浅拷贝(<code>shallow copy</code>), 仅拷贝指向对象的指针</li><li>深拷贝(`deep copy``),将整个对象拷贝至另外一块内存<span id="more"></span><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2></li><li>假设原有一个列表<code>la = [1,2,3,[4,5,6]]</code>,将其浅拷贝到<code>lb</code></li><li><code>lb</code>中某个元素改变时,会直接根据指针指向此列表所在内存,改变此列表值</li><li>最终<code>la</code>值也改变  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>la = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>lb = la<br><span class="hljs-meta">&gt;&gt;&gt; </span>lb[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(lb)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(la)<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br></code></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = a.copy()<br><span class="hljs-meta">&gt;&gt;&gt; </span>b[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>]]<br></code></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2>通过引入<code>copy</code>,使用<code>copy.deepcopy()</code>方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> copy<br><span class="hljs-meta">&gt;&gt;&gt; </span>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c = copy.deepcopy(a)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">99</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">99</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>]]<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>advance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--运算符重载</title>
    <link href="/2021/07/07/Python/advance/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <url>/2021/07/07/Python/advance/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><ul><li><code>python</code>中一切都是对象,每个对象都有一些特殊的内部方法</li><li>这些方法都遵循<code>__action__</code>的命名规定<span id="more"></span></li><li>通过运算符重载,可以让类进行一些数学运算<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vector</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x, y</span>):</span><br>        self.x = x<br>        self.y = y<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__add__</span>(<span class="hljs-params">self, v</span>):</span><br>        <span class="hljs-comment"># Addition with another vector.</span><br>        <span class="hljs-keyword">return</span> Vector(self.x + v.x, self.y + v.y)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__sub__</span>(<span class="hljs-params">self, v</span>):</span><br>        <span class="hljs-comment"># Subtraction with another vector.</span><br>        <span class="hljs-keyword">return</span> Vector(self.x - v.x, self.y - v.y)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__mul__</span>(<span class="hljs-params">self, s</span>):</span><br>        <span class="hljs-comment"># Multiplication with a scalar.</span><br>        <span class="hljs-keyword">return</span> Vector(self.x * s, self.y * s)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__div__</span>(<span class="hljs-params">self, s</span>):</span><br>        <span class="hljs-comment"># Division with a scalar.</span><br>        float_s = <span class="hljs-built_in">float</span>(s)<br>        <span class="hljs-keyword">return</span> Vector(self.x / float_s, self.y / float_s)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__floordiv__</span>(<span class="hljs-params">self, s</span>):</span><br>        <span class="hljs-comment"># Division with a scalar (value floored).</span><br>        <span class="hljs-keyword">return</span> Vector(self.x // s, self.y // s)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># Print friendly representation of Vector class. Else, it would</span><br>        <span class="hljs-comment"># show up like, &lt;__main__.Vector instance at 0x01DDDDC8&gt;.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;Vector (%f, %f)&gt;&#x27;</span> % (self.x, self.y, )<br><br>a = Vector(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>b = Vector(<span class="hljs-number">2</span>, <span class="hljs-number">7</span>)<br><br><span class="hljs-built_in">print</span> a + b <span class="hljs-comment"># Output: &lt;Vector (5.000000, 12.000000)&gt;</span><br><span class="hljs-built_in">print</span> b - a <span class="hljs-comment"># Output: &lt;Vector (-1.000000, 2.000000)&gt;</span><br><span class="hljs-built_in">print</span> b * <span class="hljs-number">1.3</span> <span class="hljs-comment"># Output: &lt;Vector (2.600000, 9.100000)&gt;</span><br><span class="hljs-built_in">print</span> a // <span class="hljs-number">17</span> <span class="hljs-comment"># Output: &lt;Vector (0.000000, 0.000000)&gt;</span><br><span class="hljs-built_in">print</span> a / <span class="hljs-number">17</span> <span class="hljs-comment"># Output: &lt;Vector (0.176471, 0.294118)&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>advance</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--数组</title>
    <link href="/2021/07/07/Python/basic/%E6%95%B0%E7%BB%84/"/>
    <url>/2021/07/07/Python/basic/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="数组-array"><a href="#数组-array" class="headerlink" title="数组-array"></a>数组-array</h1><p>数组的基本性质:</p><ul><li>数组本身不属于基本数据类型,需要导入<code>array</code>使用数组</li><li>数组内部元素类型相同<span id="more"></span></li><li>数组不同于列表:内部元素相同,列表内部元素可以不同</li><li>人如其名,内部元素只能是数字<h2 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h2></li><li>声明一个数组,必须遵循基本语法:<br><code>arrayName = array(typecode, [initializers])</code>: typecode:str  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1 = array(<span class="hljs-string">&#x27;i&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1, arr1.__class__)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">array</span>.<span class="hljs-title">array</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure></li><li>当声明数据类型与<code>initializers</code>数据类型不一,则报错:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1 = array(<span class="hljs-string">&#x27;i&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2.2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>Traceback (most recent call last):<br>File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: integer argument expected, got <span class="hljs-built_in">float</span><br></code></pre></td></tr></table></figure></li><li>指定数据类型后,<code>initializers</code>可为空:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1 = array(<span class="hljs-string">&#x27;i&#x27;</span>,[])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h2><h3 id="索引–"><a href="#索引–" class="headerlink" title="索引–[]"></a>索引–<code>[]</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1 = array(<span class="hljs-string">&#x27;i&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>])<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="切片–"><a href="#切片–" class="headerlink" title="切片–:"></a>切片–<code>:</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>:])<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><h3 id="index-x"><a href="#index-x" class="headerlink" title="index(x)"></a><code>index(x)</code></h3>返回首次出现<code>x</code>的最小索引<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1 = array(<span class="hljs-string">&#x27;i&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1.index(<span class="hljs-number">5</span>))<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="负索引"><a href="#负索引" class="headerlink" title="负索引"></a>负索引</h3><h2 id="修改数组"><a href="#修改数组" class="headerlink" title="修改数组"></a>修改数组</h2><h3 id="append"><a href="#append" class="headerlink" title="append()"></a><code>append()</code></h3>将一个元素添加到数组末尾<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.append(<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><h3 id="insert-x-i"><a href="#insert-x-i" class="headerlink" title="insert(x, i)"></a><code>insert(x, i)</code></h3>将元素<code>x</code>指定添加到<code>i</code>处<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.insert(<span class="hljs-number">1</span>, <span class="hljs-number">22</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">22</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><h3 id="extend-x"><a href="#extend-x" class="headerlink" title="extend(x)"></a><code>extend(x)</code></h3>将x元素添加到数组,若<code>x</code>时数组,则二者应有相同的数据类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1 = array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr2 = array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr1.extend(arr2)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><h3 id="fromlist"><a href="#fromlist" class="headerlink" title="fromlist()"></a><code>fromlist()</code></h3>将<code>list</code>中的元素添加到数组中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>l = [<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.fromlist(l)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>])<br></code></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a><code>reverse()</code></h3>反转数组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1.reverse())<br><span class="hljs-literal">None</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>arr1.reverse()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr1.reverse()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="+"></a><code>+</code></h3>将两个数组拼接<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1 + arr2)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="*"></a><code>*</code></h3>将数组复制添加到本身<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1*<span class="hljs-number">2</span>)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h3 id="del-arr-i"><a href="#del-arr-i" class="headerlink" title="del arr[i]"></a><code>del arr[i]</code></h3>删除某个元素,或数组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> arr1[<span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> arr1<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr1)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>NameError: name <span class="hljs-string">&#x27;arr1&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a><code>remove()</code></h3>从数组中删除第一个出现的<code>x</code>元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr2<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr2.remove(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr2)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a><code>pop()</code></h3>删除并返回数组的最后一个元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr2<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr2.remove(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr2)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure>也可指定<code>pop</code>对象索引<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr2)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr2.pop(<span class="hljs-number">2</span>)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr2)<br>array(<span class="hljs-string">&#x27;i&#x27;</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pyhont--字典</title>
    <link href="/2021/07/07/Python/basic/%E5%AD%97%E5%85%B8/"/>
    <url>/2021/07/07/Python/basic/%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="字典-Dictionary"><a href="#字典-Dictionary" class="headerlink" title="字典-Dictionary"></a>字典-Dictionary</h1><p>字典的基本性质:</p><ul><li>字典是python的内置数据类型</li><li>字典的数据是键值对一一对应,根据键索引指定值<span id="more"></span><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><code>1.</code> 使用<code>&#123;&#125;</code>创建字典,声明其类型</li><li>字典键是不可变数据类型,用元组或不可变集合创建</li><li>字典值是可变数据类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>:<span class="hljs-string">&#x27;value2&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(dict1))<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">dict1[<span class="hljs-number">1</span>]</span>)</span><br><span class="hljs-class"><span class="hljs-title">value1</span></span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>键只能是不可变数据类型:元组 不可变集合<br>值都可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dict1 = &#123;tp1:tp1&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dict1, dict1.__class__)<br>&#123;(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>): (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>)&#125; &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><code>2.</code> 使用<code>dict()</code>初始化字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;Blue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">2</span>]<br><span class="hljs-string">&#x27;Pink&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h2><h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;Blue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">2</span>]<br><span class="hljs-string">&#x27;Pink&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">3</span>]<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>KeyError: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><code>[]</code>索引找不到值则报错</p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a><code>get()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;Blue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">2</span>]<br><span class="hljs-string">&#x27;Pink&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;Blue&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;Blue&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">3</span>]<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>KeyError: <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(d.get(<span class="hljs-number">3</span>))<br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>当<code>.get()</code>方法找不到值,则返回<code>None</code></p><h3 id="更新值"><a href="#更新值" class="headerlink" title="更新值"></a>更新值</h3><p>使用键定位,更新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;Blue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;cjblue&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(d)<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>直接使用新键,则添加新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;marklily&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><code>1.</code> <code>pop()</code> 删除并返回给定键的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;Pink&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d.pop(<span class="hljs-number">2</span>)<br><span class="hljs-string">&#x27;Pink&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><code>2.</code> <code>popitem()</code> 删除并返回任意一个键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;floyd&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d.popitem()<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;floyd&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;pink&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><code>3.</code> <code>clear()</code> 删除所有元素但不删除字典本身</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d.clear()<br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p><code>4.</code> <code>del</code> 删除特定键值对或删除整个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cjblue&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;floyd&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> d[<span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>&#123;<span class="hljs-number">5</span>: <span class="hljs-string">&#x27;marklily&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;floyd&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> d<br><span class="hljs-meta">&gt;&gt;&gt; </span>d<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>NameError: name <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python--递归</title>
    <link href="/2021/07/07/Python/basic/%E9%80%92%E5%BD%92/"/>
    <url>/2021/07/07/Python/basic/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><span id="more"></span><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>计算阶乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cal</span>(<span class="hljs-params">n</span>):</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br><span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">else</span>:<br><span class="hljs-meta">... </span>            <span class="hljs-keyword">return</span> n * cal(n - <span class="hljs-number">1</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(cal(<span class="hljs-number">4</span>))<br><span class="hljs-number">24</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(cal(<span class="hljs-number">6</span>))<br><span class="hljs-number">720</span><br></code></pre></td></tr></table></figure><ul><li>递归函数内部会调用函数本身</li><li>某次调用递归函数时,内部调用本身时会指定参数</li><li>在递归函数中,应有一个结束参数信号,在每次递归中,参数不断靠近该信号<h2 id="递归次数限制"><a href="#递归次数限制" class="headerlink" title="递归次数限制"></a>递归次数限制</h2><code>python</code>递归次数限制为<code>3000</code>次,超出此次数则会触发<code>RecursionError</code><h2 id="移除递归次数限制"><a href="#移除递归次数限制" class="headerlink" title="移除递归次数限制"></a>移除递归次数限制</h2><code>sys.setrecursionlimit(5000)</code> 设置次数限制为我们所需要的次数</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas--基础</title>
    <link href="/2021/07/07/Python/basic/Pandas%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/07/Python/basic/Pandas%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="2142"><a href="#2142" class="headerlink" title="2142"></a>2142</h1><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>pandas有两种数据结构：Series and dataframe数据框</p><span id="more"></span><ul><li>Series<br>Series是一个一维标记数组，可以存储任何种类的数据  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_series = pd.Series([<span class="hljs-number">3</span>,-<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(my_series)  <br></code></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a    <span class="hljs-number">3</span><br>b   -<span class="hljs-number">5</span><br>c    <span class="hljs-number">7</span><br>d    <span class="hljs-number">4</span><br>dtype: int64<br></code></pre></td></tr></table></figure>  Series中的数据可通过index找到  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(my_series[<span class="hljs-string">&#x27;d&#x27;</span>])<br></code></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><blockquote><p>series类似于字典(当然这只是个人直观感受)</p></blockquote></li><li>dataframe是一个二维数据结构,包含不同的列  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<br>    <span class="hljs-string">&#x27;Country&#x27;</span> : [<span class="hljs-string">&#x27;Belgium&#x27;</span>, <span class="hljs-string">&#x27;India&#x27;</span>, <span class="hljs-string">&#x27;Brazil&#x27;</span> ],<br>    <span class="hljs-string">&#x27;Capital&#x27;</span>: [<span class="hljs-string">&#x27;Brussels&#x27;</span>, <span class="hljs-string">&#x27;New   Delhi&#x27;</span>, <span class="hljs-string">&#x27;Brassilia&#x27;</span>],<br>    <span class="hljs-string">&#x27;Population&#x27;</span>: [<span class="hljs-number">1234</span>,<span class="hljs-number">1234</span>,<span class="hljs-number">1234</span>]&#125;<br>datas = pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;Country&#x27;</span>,<span class="hljs-string">&#x27;Capital&#x27;</span>,<span class="hljs-string">&#x27;Population&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(datas))<br><span class="hljs-built_in">print</span>(datas)<br></code></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">Country</span>    <span class="hljs-title">Capital</span>  <span class="hljs-title">Population</span></span><br><span class="hljs-class">0  <span class="hljs-title">Belgium</span>   <span class="hljs-title">Brussels</span>        1234</span><br><span class="hljs-class">1    <span class="hljs-title">India</span>  <span class="hljs-title">New</span> <span class="hljs-title">Delhi</span>        1234</span><br><span class="hljs-class">2   <span class="hljs-title">Brazil</span>  <span class="hljs-title">Brassilia</span>        1234</span><br></code></pre></td></tr></table></figure><blockquote><p>创建dataframe时,在写入或打印时会自动生成从第一行正式数据开始的行序号 and 第一列正式数据开始的列序号<br>dataframe类似于数组,可直接使用行列序号进行访问具体的数据</p></blockquote><h2 id="调用-读取数据"><a href="#调用-读取数据" class="headerlink" title="调用/读取数据"></a>调用/读取数据</h2></li><li>CSV文件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pd = pd.read_csv(<span class="hljs-string">&#x27;.//testdata/demo1.csv&#x27;</span>)<br><span class="hljs-built_in">print</span>(pd.__class__)<br></code></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure></li><li>xlsx文件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.read_excel(<span class="hljs-string">&#x27;.//testdata/demo1.xlsx&#x27;</span> )<br><span class="hljs-built_in">print</span>(df.__class__)<br></code></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2>各类文件读取成为dataframe数据后可随意转存为其他格式的文件  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">df_cvs = pd.read_csv(<span class="hljs-string">&#x27;.//testdata/demo1.csv&#x27;</span> )<br>df_xlsx = pd.read_excel(<span class="hljs-string">&#x27;.//testdata/demo1.xlsx&#x27;</span> )<br><span class="hljs-comment"># csv读取的文件保存为csv</span><br>df_cvs.to_csv(<span class="hljs-string">&#x27;csv_to_csv.csv&#x27;</span>)<br><span class="hljs-comment"># excel读取的数据保存为excel</span><br>df_xlsx.to_excel(<span class="hljs-string">&#x27;xlsx_to_xlsx.xlsx&#x27;</span>)<br><span class="hljs-comment"># csv读取的数据保存为excel</span><br>df_cvs.to_excel(<span class="hljs-string">&#x27;csv_to_xlsx.xlsx&#x27;</span>)<br><span class="hljs-comment"># excel读取的数据保存为csv</span><br>df_xlsx.to_csv(<span class="hljs-string">&#x27;xlsx_to_csv.csv&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="创建测试对象"><a href="#创建测试对象" class="headerlink" title="创建测试对象"></a>创建测试对象</h2>创建一个<code>20 × 5</code> 的随机数的数据框(dataframe)</li></ul><ol><li><p>使用np生成矩阵的形式创建dataframe’</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">test_data = pd.DataFrame(np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>, size=(<span class="hljs-number">20</span>, <span class="hljs-number">5</span>)))<br><span class="hljs-built_in">print</span>(test_data)<br></code></pre></td></tr></table></figure></li><li><p>直接输入生成</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame(&#123;<span class="hljs-string">&quot;id&quot;</span>:[<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>,<span class="hljs-number">1004</span>,<span class="hljs-number">1005</span>,<span class="hljs-number">1006</span>], <br><span class="hljs-string">&quot;date&quot;</span>:pd.date_range(<span class="hljs-string">&#x27;20130102&#x27;</span>, periods=<span class="hljs-number">6</span>),<br><span class="hljs-string">&quot;city&quot;</span>:[<span class="hljs-string">&#x27;Beijing &#x27;</span>, <span class="hljs-string">&#x27;SH&#x27;</span>, <span class="hljs-string">&#x27; guangzhou &#x27;</span>, <span class="hljs-string">&#x27;Shenzhen&#x27;</span>, <span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;BEIJING &#x27;</span>],<br><span class="hljs-string">&quot;age&quot;</span>:[<span class="hljs-number">23</span>,<span class="hljs-number">44</span>,<span class="hljs-number">54</span>,<span class="hljs-number">32</span>,<span class="hljs-number">34</span>,<span class="hljs-number">32</span>],<br><span class="hljs-string">&quot;category&quot;</span>:[<span class="hljs-string">&#x27;100-A&#x27;</span>,<span class="hljs-string">&#x27;100-B&#x27;</span>,<span class="hljs-string">&#x27;110-A&#x27;</span>,<span class="hljs-string">&#x27;110-C&#x27;</span>,<span class="hljs-string">&#x27;210-A&#x27;</span>,<span class="hljs-string">&#x27;130-F&#x27;</span>],<br><span class="hljs-string">&quot;price&quot;</span>:[<span class="hljs-number">1200</span>,np.nan,<span class="hljs-number">2133</span>,<span class="hljs-number">5433</span>,np.nan,<span class="hljs-number">4432</span>]&#125;,<br>)<br></code></pre></td></tr></table></figure><ul><li>可在{}内数据内容后添加<code>columns =[&#39;id&#39;,&#39;date&#39;,&#39;city&#39;,&#39;category&#39;,&#39;age&#39;,&#39;price&#39;]</code>,借此自定义dataframe内数据的列次序<h3 id="统计数据函数"><a href="#统计数据函数" class="headerlink" title="统计数据函数"></a>统计数据函数</h3></li></ul></li><li><p>df.info() :本函数提供dataframe的以下信息:</p><ul><li>RangeIndex:有多少数据</li><li>Data Columns:指定找到多少列</li><li>Columns:提供关于columns的信息</li><li>dtypes:提供dataframe内的数据类型</li><li>memory usage:表明内存使用量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">test_data = pd.DataFrame(np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>, size=(<span class="hljs-number">20</span>, <span class="hljs-number">5</span>)))<br><span class="hljs-built_in">print</span>(test_data.info()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br><span class="hljs-class"><span class="hljs-title">RangeIndex</span>:</span> <span class="hljs-number">20</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">19</span><br>Data columns (total <span class="hljs-number">5</span> columns):<br><span class="hljs-comment">#   Column  Non-Null Count  Dtype</span><br>---  ------  --------------  -----<br><span class="hljs-number">0</span>   <span class="hljs-number">0</span>       <span class="hljs-number">20</span> non-null     int32<br><span class="hljs-number">1</span>   <span class="hljs-number">1</span>       <span class="hljs-number">20</span> non-null     int32<br><span class="hljs-number">2</span>   <span class="hljs-number">2</span>       <span class="hljs-number">20</span> non-null     int32<br><span class="hljs-number">3</span>   <span class="hljs-number">3</span>       <span class="hljs-number">20</span> non-null     int32<br><span class="hljs-number">4</span>   <span class="hljs-number">4</span>       <span class="hljs-number">20</span> non-null     int32<br>dtypes: int32(<span class="hljs-number">5</span>)<br>memory usage: <span class="hljs-number">528.0</span> <span class="hljs-built_in">bytes</span><br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>df.shape</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(test_data.shape)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">20</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><blockquote><p>类似于数组,shape作为属性,而非函数</p></blockquote></li><li><p>df.index():显示找到的索引信息</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python.">print(test_data.index)<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">RangeIndex(start=<span class="hljs-number">0</span>, stop=<span class="hljs-number">20</span>, step=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><blockquote><p>index作为属性 not callable</p></blockquote></li><li><p>df.count():给出每一列中有多少数据</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python.">print(test_data.count())<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span>    <span class="hljs-number">20</span><br><span class="hljs-number">1</span>    <span class="hljs-number">20</span><br><span class="hljs-number">2</span>    <span class="hljs-number">20</span><br><span class="hljs-number">3</span>    <span class="hljs-number">20</span><br><span class="hljs-number">4</span>    <span class="hljs-number">20</span><br>dtype: int64<br></code></pre></td></tr></table></figure></li><li><p>df.sum():给出每一列中的求和</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python.">print(test_data.sum())<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span>    <span class="hljs-number">200</span><br><span class="hljs-number">1</span>    <span class="hljs-number">119</span><br><span class="hljs-number">2</span>    <span class="hljs-number">240</span><br><span class="hljs-number">3</span>    <span class="hljs-number">214</span><br><span class="hljs-number">4</span>    <span class="hljs-number">204</span><br>dtype: int64<br></code></pre></td></tr></table></figure></li><li><p>df.sum():给出每一列中的求和</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python.">print(test_data.sum())<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span>    <span class="hljs-number">200</span><br><span class="hljs-number">1</span>    <span class="hljs-number">119</span><br><span class="hljs-number">2</span>    <span class="hljs-number">240</span><br><span class="hljs-number">3</span>    <span class="hljs-number">214</span><br><span class="hljs-number">4</span>    <span class="hljs-number">204</span><br>dtype: int64<br></code></pre></td></tr></table></figure></li><li><p>df.cumsum()<br> 给出依次将每列前n行求和的结果</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python.">print(test_data.cumsum())<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-built_in">id</span>       date         city category  age   price<br><span class="hljs-number">0</span>  <span class="hljs-number">1001</span> <span class="hljs-number">2013</span>-01-02     Beijing     <span class="hljs-number">100</span>-A   <span class="hljs-number">23</span>  <span class="hljs-number">1200.0</span><br><span class="hljs-number">1</span>  <span class="hljs-number">1002</span> <span class="hljs-number">2013</span>-01-03           SH    <span class="hljs-number">100</span>-B   <span class="hljs-number">44</span>     NaN<br><span class="hljs-number">2</span>  <span class="hljs-number">1003</span> <span class="hljs-number">2013</span>-01-04   guangzhou     <span class="hljs-number">110</span>-A   <span class="hljs-number">54</span>  <span class="hljs-number">2133.0</span><br><span class="hljs-number">3</span>  <span class="hljs-number">1004</span> <span class="hljs-number">2013</span>-01-05     Shenzhen    <span class="hljs-number">110</span>-C   <span class="hljs-number">32</span>  <span class="hljs-number">5433.0</span><br><span class="hljs-number">5</span>  <span class="hljs-number">1006</span> <span class="hljs-number">2013</span>-01-07     BEIJING     <span class="hljs-number">130</span>-F   <span class="hljs-number">32</span>  <span class="hljs-number">4432.0</span><br><span class="hljs-built_in">id</span>       date                                           city                        category  age    price     <br><span class="hljs-number">0</span>  <span class="hljs-number">1001</span> <span class="hljs-number">2013</span>-01-02                                       Beijing                            <span class="hljs-number">100</span>-A   <span class="hljs-number">23</span>   <span class="hljs-number">1200.0</span>     <br><span class="hljs-number">1</span>  <span class="hljs-number">2003</span> <span class="hljs-number">2056</span>-01-05                                     Beijing SH                      <span class="hljs-number">100</span>-A100-B   <span class="hljs-number">67</span>      NaN     <br><span class="hljs-number">2</span>  <span class="hljs-number">3006</span> <span class="hljs-number">2099</span>-01-08                          Beijing SH guangzhou                  <span class="hljs-number">100</span>-A100-B110-A  <span class="hljs-number">121</span>   <span class="hljs-number">3333.0</span>     <br><span class="hljs-number">3</span>  <span class="hljs-number">4010</span> <span class="hljs-number">2142</span>-01-<span class="hljs-number">13</span>                  Beijing SH guangzhou Shenzhen            <span class="hljs-number">100</span>-A100-B110-A110-C  <span class="hljs-number">153</span>   <span class="hljs-number">8766.0</span>     <br><span class="hljs-number">4</span>  <span class="hljs-number">5015</span> <span class="hljs-number">2185</span>-01-<span class="hljs-number">18</span>          Beijing SH guangzhou Shenzhenshanghai       <span class="hljs-number">100</span>-A100-B110-A110-C210-A  <span class="hljs-number">187</span>      NaN     <br><span class="hljs-number">5</span>  <span class="hljs-number">6021</span> <span class="hljs-number">2228</span>-01-<span class="hljs-number">26</span>  Beijing SH guangzhou ShenzhenshanghaiBEIJING   <span class="hljs-number">100</span>-A100-B110-A110-C210-A130-F  <span class="hljs-number">219</span>  <span class="hljs-number">13198.0</span> <br></code></pre></td></tr></table></figure><blockquote><p>所得结果依然为dataframe</p></blockquote><ol><li>指定列时，只计算该列的累加值:<blockquote><p>tar = df[‘id’].cumsum()</p></blockquote></li><li>不指定列时，则将返回各列的累加值</li></ol></li><li><p>df.min():给出每列中的最小值</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">id</span>                         <span class="hljs-number">1001</span><br>date        <span class="hljs-number">2013</span>-01-02 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>city                 guangzhou <br>category                  <span class="hljs-number">100</span>-A<br>age                          <span class="hljs-number">23</span><br>price                    <span class="hljs-number">1200.0</span><br>dtype: <span class="hljs-built_in">object</span> <br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">series</span>.<span class="hljs-title">Series</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>所得结果为Series</p></blockquote></li><li><p>df.describe():函数提供了有关数据的基本统计信息（基于列计算）：count、mean、std、min、25%、50%、75%、max</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">            <span class="hljs-built_in">id</span>       age        price<br>count     <span class="hljs-number">6.000000</span>   <span class="hljs-number">6.00000</span>     <span class="hljs-number">4.000000</span><br>mean   <span class="hljs-number">1003.500000</span>  <span class="hljs-number">36.50000</span>  <span class="hljs-number">3299.500000</span><br>std       <span class="hljs-number">1.870829</span>  <span class="hljs-number">10.87658</span>  <span class="hljs-number">1966.638503</span><br><span class="hljs-built_in">min</span>    <span class="hljs-number">1001.000000</span>  <span class="hljs-number">23.00000</span>  <span class="hljs-number">1200.000000</span><br><span class="hljs-number">25</span>%    <span class="hljs-number">1002.250000</span>  <span class="hljs-number">32.00000</span>  <span class="hljs-number">1899.750000</span><br><span class="hljs-number">50</span>%    <span class="hljs-number">1003.500000</span>  <span class="hljs-number">33.00000</span>  <span class="hljs-number">3282.500000</span><br><span class="hljs-number">75</span>%    <span class="hljs-number">1004.750000</span>  <span class="hljs-number">41.50000</span>  <span class="hljs-number">4682.250000</span><br><span class="hljs-built_in">max</span>    <span class="hljs-number">1006.000000</span>  <span class="hljs-number">54.00000</span>  <span class="hljs-number">5433.000000</span> <br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>df.mean():给出每列中的均值</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tar = df.mean()<br><span class="hljs-built_in">id</span>       <span class="hljs-number">1003.5</span><br>age        <span class="hljs-number">36.5</span><br>price    <span class="hljs-number">3299.5</span><br>dtype: float64<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">series</span>.<span class="hljs-title">Series</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>只针对dataframe中的数字</p></blockquote></li><li><p>df.median():给出每列中的中位数  </p><blockquote></blockquote></li><li><p>df.quantlie([0.25, 0.75]):给出每列中的25% 和 75%的分位数</p><blockquote></blockquote></li><li><p>df.var()–方差值</p><blockquote></blockquote></li><li><p>df.std()–标准差值</p><blockquote></blockquote></li><li><p>df.cummin()–返回前n行的最小值</p><blockquote></blockquote></li><li><p>len(df):确定列的行数</p><blockquote><p>len(df[‘columnId’]):返回某列的行数</p></blockquote></li><li><p>df.count():返回Nan值个数</p><blockquote></blockquote></li><li><p>df.isnull():返回dataframe中各值是否为null</p><blockquote><p>return DataFrame</p></blockquote></li><li><p>df.corr():返回各列之间的相关系数</p><h3 id="pandas中的选择与过滤"><a href="#pandas中的选择与过滤" class="headerlink" title="pandas中的选择与过滤"></a>pandas中的选择与过滤</h3></li><li><p>Series: mySeries[‘index’]–返回索引值为’index’的value</p><blockquote></blockquote></li><li><p>df[n:N]–返回行n到N-1的dataframe</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tar =df[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">id</span>       date         city category  age   price<br><span class="hljs-number">2</span>  <span class="hljs-number">1003</span> <span class="hljs-number">2013</span>-01-04   guangzhou     <span class="hljs-number">110</span>-A   <span class="hljs-number">54</span>  <span class="hljs-number">2133.0</span><br><span class="hljs-number">3</span>  <span class="hljs-number">1004</span> <span class="hljs-number">2013</span>-01-05     Shenzhen    <span class="hljs-number">110</span>-C   <span class="hljs-number">32</span>  <span class="hljs-number">5433.0</span><br><span class="hljs-number">4</span>  <span class="hljs-number">1005</span> <span class="hljs-number">2013</span>-01-06     shanghai    <span class="hljs-number">210</span>-A   <span class="hljs-number">34</span>     NaN<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>df.head()–返回dataframe中的前几行,默认为5行</p></li><li><p>df.tail()</p></li><li><p>df.sample()–随机选取几行,按频数</p></li><li><p>create filter–创建一个过滤条件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">filters = df.<span class="hljs-built_in">id</span> &gt; <span class="hljs-number">1003</span><br>df[<span class="hljs-built_in">filter</span>]<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span>  <span class="hljs-number">1004</span> <span class="hljs-number">2013</span>-01-05  Shenzhen    <span class="hljs-number">110</span>-C   <span class="hljs-number">32</span>  <span class="hljs-number">5433.0</span><br><span class="hljs-number">4</span>  <span class="hljs-number">1005</span> <span class="hljs-number">2013</span>-01-06  shanghai    <span class="hljs-number">210</span>-A   <span class="hljs-number">34</span>     NaN<br><span class="hljs-number">5</span>  <span class="hljs-number">1006</span> <span class="hljs-number">2013</span>-01-07  BEIJING     <span class="hljs-number">130</span>-F   <span class="hljs-number">32</span>  <span class="hljs-number">4432.0</span> <br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>df.filter(regex = ‘code’)–表示regex = ‘code’的列通过过滤条件</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tar = df.<span class="hljs-built_in">filter</span>(regex=<span class="hljs-string">&#x27;date&#x27;</span>).head()<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">        date<br><span class="hljs-number">0</span> <span class="hljs-number">2013</span>-01-02<br><span class="hljs-number">1</span> <span class="hljs-number">2013</span>-01-03<br><span class="hljs-number">2</span> <span class="hljs-number">2013</span>-01-04<br><span class="hljs-number">3</span> <span class="hljs-number">2013</span>-01-05<br><span class="hljs-number">4</span> <span class="hljs-number">2013</span>-01-06<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>np.logicl_and(filter1, filter2)–并行多个filter</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tar =df[np.logical_and(df[<span class="hljs-string">&#x27;id&#x27;</span>] &gt; <span class="hljs-number">1003</span>, df[<span class="hljs-string">&#x27;age&#x27;</span>] &gt; <span class="hljs-number">33</span>)]<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">4</span>  <span class="hljs-number">1005</span> <span class="hljs-number">2013</span>-01-06  shanghai    <span class="hljs-number">210</span>-A   <span class="hljs-number">34</span>    NaN<br></code></pre></td></tr></table></figure></li><li><p>df[(filter1) &amp; (filter2)]</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tar =df[(df[<span class="hljs-string">&#x27;id&#x27;</span>] &gt; <span class="hljs-number">1003</span>) &amp; (df[<span class="hljs-string">&#x27;age&#x27;</span>] &gt; <span class="hljs-number">33</span>)]<br></code></pre></td></tr></table></figure><h3 id="sort-data"><a href="#sort-data" class="headerlink" title="sort data"></a>sort data</h3></li><li><p>df.sort_values(‘columnName’, ascending=True)</p><ul><li>对columnName列排序</li><li>ascending=true表示升序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.sort_values(<span class="hljs-string">&#x27;age&#x27;</span>, ascending=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">     <span class="hljs-built_in">id</span>       date         city category  age   price<br><span class="hljs-number">0</span>  <span class="hljs-number">1001</span> <span class="hljs-number">2013</span>-01-02     Beijing     <span class="hljs-number">100</span>-A   <span class="hljs-number">23</span>  <span class="hljs-number">1200.0</span><br><span class="hljs-number">1</span>  <span class="hljs-number">1002</span> <span class="hljs-number">2013</span>-01-03           SH    <span class="hljs-number">100</span>-B   <span class="hljs-number">44</span>     NaN<br><span class="hljs-number">2</span>  <span class="hljs-number">1003</span> <span class="hljs-number">2013</span>-01-04   guangzhou     <span class="hljs-number">110</span>-A   <span class="hljs-number">54</span>  <span class="hljs-number">2133.0</span><br><span class="hljs-number">3</span>  <span class="hljs-number">1004</span> <span class="hljs-number">2013</span>-01-05     Shenzhen    <span class="hljs-number">110</span>-C   <span class="hljs-number">32</span>  <span class="hljs-number">5433.0</span><br><span class="hljs-number">4</span>  <span class="hljs-number">1005</span> <span class="hljs-number">2013</span>-01-06     shanghai    <span class="hljs-number">210</span>-A   <span class="hljs-number">34</span>     NaN<br><span class="hljs-number">5</span>  <span class="hljs-number">1006</span> <span class="hljs-number">2013</span>-01-07     BEIJING     <span class="hljs-number">130</span>-F   <span class="hljs-number">32</span>  <span class="hljs-number">4432.0</span><br>    <span class="hljs-built_in">id</span>       date         city category  age   price<br><span class="hljs-number">0</span>  <span class="hljs-number">1001</span> <span class="hljs-number">2013</span>-01-02     Beijing     <span class="hljs-number">100</span>-A   <span class="hljs-number">23</span>  <span class="hljs-number">1200.0</span><br><span class="hljs-number">3</span>  <span class="hljs-number">1004</span> <span class="hljs-number">2013</span>-01-05     Shenzhen    <span class="hljs-number">110</span>-C   <span class="hljs-number">32</span>  <span class="hljs-number">5433.0</span><br><span class="hljs-number">5</span>  <span class="hljs-number">1006</span> <span class="hljs-number">2013</span>-01-07     BEIJING     <span class="hljs-number">130</span>-F   <span class="hljs-number">32</span>  <span class="hljs-number">4432.0</span><br><span class="hljs-number">4</span>  <span class="hljs-number">1005</span> <span class="hljs-number">2013</span>-01-06     shanghai    <span class="hljs-number">210</span>-A   <span class="hljs-number">34</span>     NaN<br><span class="hljs-number">1</span>  <span class="hljs-number">1002</span> <span class="hljs-number">2013</span>-01-03           SH    <span class="hljs-number">100</span>-B   <span class="hljs-number">44</span>     NaN<br><span class="hljs-number">2</span>  <span class="hljs-number">1003</span> <span class="hljs-number">2013</span>-01-04   guangzhou     <span class="hljs-number">110</span>-A   <span class="hljs-number">54</span>  <span class="hljs-number">2133.0</span><br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>df.sort_index()</p><ul><li>对索引按照默认升序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.sort_index()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">### 重命名&amp;定义\修改新的列</span><br><span class="hljs-number">1.</span> df.rename(columns = &#123;<span class="hljs-string">&#x27;oldColumnName&#x27;</span>:<span class="hljs-string">&#x27;newColumnName&#x27;</span>&#125;)<br>   * 重命名<br> <span class="hljs-number">9</span>   ```python<br>    tar = df.rename(columns = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:<span class="hljs-string">&#x27;newId&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>df[‘newColume’] = newDesignWay</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;thisisanewcolumn&#x27;</span>] = pd.Series(np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">     <span class="hljs-built_in">id</span>       date         city category  age   price  thisisanewcolumn<br><span class="hljs-number">0</span>  <span class="hljs-number">1001</span> <span class="hljs-number">2013</span>-01-02     Beijing     <span class="hljs-number">100</span>-A   <span class="hljs-number">23</span>  <span class="hljs-number">1200.0</span>                 <span class="hljs-number">0</span><br><span class="hljs-number">1</span>  <span class="hljs-number">1002</span> <span class="hljs-number">2013</span>-01-03           SH    <span class="hljs-number">100</span>-B   <span class="hljs-number">44</span>     NaN                 <span class="hljs-number">1</span><br><span class="hljs-number">2</span>  <span class="hljs-number">1003</span> <span class="hljs-number">2013</span>-01-04   guangzhou     <span class="hljs-number">110</span>-A   <span class="hljs-number">54</span>  <span class="hljs-number">2133.0</span>                 <span class="hljs-number">2</span><br><span class="hljs-number">3</span>  <span class="hljs-number">1004</span> <span class="hljs-number">2013</span>-01-05     Shenzhen    <span class="hljs-number">110</span>-C   <span class="hljs-number">32</span>  <span class="hljs-number">5433.0</span>                 <span class="hljs-number">3</span><br><span class="hljs-number">4</span>  <span class="hljs-number">1005</span> <span class="hljs-number">2013</span>-01-06     shanghai    <span class="hljs-number">210</span>-A   <span class="hljs-number">34</span>     NaN                 <span class="hljs-number">4</span><br><span class="hljs-number">5</span>  <span class="hljs-number">1006</span> <span class="hljs-number">2013</span>-01-07     BEIJING     <span class="hljs-number">130</span>-F   <span class="hljs-number">32</span>  <span class="hljs-number">4432.0</span>                 <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>df.index.name = “index_name”</p><ul><li>修改index为新index<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">    ```<br><span class="hljs-number">4.</span> df.columns = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>.lower, df.columns)<br>    * 所有列名变大写字母<br>    ```python<br>    df.columns = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>.lower, df.columns)<br></code></pre></td></tr></table></figure><blockquote><p>map()–python的内置函数,接受一个function,数个待迭代的list,使用function对list进行处理得到新的list,并不改变原list</p></blockquote></li></ul></li></ol><h3 id="Drop-Data"><a href="#Drop-Data" class="headerlink" title="Drop Data"></a>Drop Data</h3><ol><li>df.drop(columns=[‘columnName’])<ul><li>指定删除某列数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tar = df.drop(columns=[<span class="hljs-string">&#x27;Id&#x27;</span>])<br></code></pre></td></tr></table></figure></li></ul></li><li>mySeries.drop([‘a’])<ul><li>指定删除索引值指向的value</li></ul></li><li>f.drop(‘Volume’, axis=1)<ul><li>删除一个变量\一个量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tar =  df.drop(<span class="hljs-string">&#x27;Id&#x27;</span>, axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="转换数据类型"><a href="#转换数据类型" class="headerlink" title="转换数据类型"></a>转换数据类型</h3></li></ul></li><li>df.dtypes<br> dataframe内各列的数据类型</li><li>df[‘columnName’] = df[‘columnName’].astype(‘dataType’)<ul><li>转换指定行的数据类型<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;Id&#x27;</span>] = df[<span class="hljs-string">&#x27;Id&#x27;</span>].astype(<span class="hljs-string">&#x27;float&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h3></li></ul></li><li>方法1–自定义def函数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">examples</span>(<span class="hljs-params">x</span>):</span>   <span class="hljs-comment">#create a function</span><br><span class="hljs-keyword">return</span> x*<span class="hljs-number">2</span><br><br>df.Open.apply(examples).head()  <span class="hljs-comment">#use the function with apply()  </span><br></code></pre></td></tr></table></figure><blockquote><p>自定义函数后,df.ColumnName获取df中需要使用此函数的列,再对此列使用apply函数,传入需要使用的函数</p></blockquote></li><li>lambda函数 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.Open.apply(<span class="hljs-keyword">lambda</span> x: x*<span class="hljs-number">2</span>).head()<br></code></pre></td></tr></table></figure><blockquote><p>df.ColumnName获取df中需要使用此函数的列,再对此列使用lambda 声明数据处理方法</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>pandas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
